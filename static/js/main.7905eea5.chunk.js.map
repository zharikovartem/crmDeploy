{"version":3,"sources":["utils/validators/validators.js","components/Header/Header.js","api/api.js","redux/userReducer.js","redux/userSelectors.js","components/Header/HeaderContainer.js","components/Content/Login/LoginForm/FieldFormComponent.js","components/Content/Login/LoginForm/LoginForm.js","components/Content/Login/LoginForm/LoginFormContainer.js","components/Content/Login/Login.js","components/Content/Login/LoginContainer.js","components/universal/EditebleSpan/EditebleSpanHOC.js","redux/universalReducer.js","components/universal/EditebleSpan/EditebleSpanContainer.js","components/Content/Admin/MainCatalog/MainCatalog.js","redux/adminReducer.js","components/Content/Admin/MainCatalog/MainCatalogContainer.js","components/universal/Pagination/Pagination.js","components/Content/Admin/Process/Process.js","components/Content/Admin/Process/ProcessContainer.js","components/Content/Admin/Settings/BaseFields/BaseFields.js","components/Content/Admin/Settings/Constants/Constants.js","components/Content/Admin/Settings/BaseFields/BaseFieldsContainer.js","components/Content/Admin/Settings/Constants/ConstantsContainer.js","components/Content/Admin/Settings/Settings.js","components/Content/Admin/Settings/SettingsContainer.js","utils/components/components.js","components/Content/Admin/Providers/ProviderCreate/ProviderForm/forms/LoadTypeForm.js","components/Content/Admin/Providers/ProviderCreate/ProviderForm/forms/ContactForm.js","components/Content/Admin/Providers/ProviderCreate/ProviderForm/forms/AdressForm.js","components/Content/Admin/Providers/ProviderCreate/ProviderForm/forms/PayForm.js","components/Content/Admin/Providers/ProviderCreate/ProviderForm/ProviderForm.js","components/Content/Admin/Providers/ProviderCreate/ProviderCreate.js","components/Content/Admin/Providers/ProviderCreate/ProviderCreateContainer.js","components/Content/Admin/Providers/ProviderList/ProviderList.js","components/Content/Admin/Providers/ProviderList/ProviderListContainer.js","components/Content/Admin/Providers/Providers.js","components/Content/Admin/Providers/ProvidersContainer.js","components/Content/Admin/Admin.js","components/Content/Admin/AdminContainer.js","components/Catalog/Catalog.js","components/Content/Content.js","components/Content/ContentContainer.js","App.js","serviceWorker.js","redux/store.js","index.js"],"names":["maxLength","Header","props","Navbar","bg","expand","Brand","href","Toggle","aria-controls","Collapse","id","Nav","className","Link","to","isAuth","onClick","logout","status","instanse","axios","withCredentials","baseURL","headers","userAPI","get","then","response","data","phone","password","rememberMe","post","adminAPI","currentPage","totalCount","console","log","type","formData","universalAPI","params","initialState","name","userId","isLoginInProgress","setUser","userData","userReducer","stateCopy","state","action","resultCode","User","error","newPhone","newPass","isFetching","getAuth","user","getStatus","connect","createSelector","users","filter","u","dispatch","requiredField","value","latinOnly","RegExp","test","isEmail","currentLnghtCreator","currentLenght","length","phoneNumberValidator","FieldFormInput","this","placeholder","input","meta","required","hasError","touched","FormGroup","controlId","validationState","Form","Label","children","FormControl","onChange","isInvalid","Control","Feedback","Component","maxLength10","LoginReduxForm","reduxForm","form","useState","validated","noValidate","onSubmit","handleSubmit","Field","validate","component","for","Alert","key","variant","Button","LoginForm","Login","LoginFormContainer","getLoginThunkCreator","React","togleLoginProgress","stopSubmit","_error","messages","EditebleSpan","memo","editeMode","setEditeMode","inputValue","changeValue","useEffect","autoFocus","e","target","onBlur","updateFieldRecord","table","fieldName","itemId","reRenderComponent","componentName","onDoubleClick","universalReducer","updateFieldValue","MainCatalog","title","group","changeInput","text","field","getAttribute","setState","createNewType","crateNewProductType","deleteProductTypeItem","evt","evtKey","currentTarget","deleteProductType","loadProductTypeItemList","admin","contentList","includes","handleSelect","push","getProductTypeList","lists","content","map","item","EditebleSpanContainer","ButtonGroup","size","DropdownButton","as","onSelect","Dropdown","Item","eventKey","eventId","Accordion","Card","Body","InputGroup","Prepend","Text","aria-label","aria-describedby","custom","Table","striped","bordered","hover","process","processData","pageSize","totalProcessCount","settings","providers","providersData","constants","tabIsLoaded","setCurrentProcessPage","currentProcessPage","getProcessList","processCount","getSettingsList","adminReducer","PaginationComponent","pagesCount","Math","ceil","totalItemsCount","pageSizs","pages","i","portionCount","portionSize","portionNumber","setPortionNumber","leftPortionPageNumber","rightPortionPageNumber","changePage","onPageCanged","innerText","Pagination","First","disabled","Prev","p","active","Next","Last","Process","processList","num","changePageOnProcess","BaseFields","BaseFieldRows","undefined","standartFieldsToProductType","ListGroup","Constants","castomState","changeData","getConstantList","changeValueInConstItem","constantsBlock","constantItem","elementNumber","constantRowBlock","element","param","constantRow","Settings","ConstantsContainer","InputAsRow","Row","column","sm","Col","InputAsRowAppendBtn","Append","SelectAsRow","options","optionsBlock","prop","Group","onChangeSet","LoadTypeForm","loadType","choisLoadTypeToState","getEmailList","loadTypeBlock","AppendSet","ContactForm","contactType","addContactTypeTo","s","v","t","contactTypeBlock","primaryContactOptions","pop","AdressForm","workTime","setWorkTimeTo","warehouseAnotherPlase","setWarehouseAnotherPlaseTo","warehouseAnotherTime","setWarehouseAnotherTimeTo","setWorkTime","newWorkTime","dayItem","day","PayForm","payCash","setPayCashTo","payBank","setPayBankTo","possibilityDeferredPayment","setpossibilityDeferredPaymentTo","currentLnght29","currentLnght8","currentLnght9","ProviderReduxForm","ProviderCreate","show","setShow","handleClose","Modal","onHide","closeButton","Title","createNewProvider","Footer","ProviderList","getProvidersList","providersList","createParamsElemens","paramsBlock","itemKey","paramItem","colSpan","providerParams","Providers","ProviderCreateContainer","ProviderListContainer","Admin","event","tabName","setHandleSelect","defaultActiveKey","NavLink","path","render","MainCatalogContainer","ProcessContainer","SettingsContainer","ProvidersContainer","TestForm","setValidated","checkValidity","preventDefault","stopPropagation","md","defaultValue","Check","label","feedback","Content","Container","LoginContainer","AdminContainer","App","getAuthMeThunkCreator","HeaderContainer","ContentContainer","Boolean","window","location","hostname","match","redusers","combineReducers","universal","formReducer","store","createStore","applyMiddleware","thunkMiddleware","rerenderEntireTree","ReactDOM","document","getElementById","getState","subscribe","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.7905eea5.chunk.js","sourcesContent":["export const requiredField = (value) => {\r\n    if (value) return undefined;\r\n\r\n    return 'Поле обязательно для заплнения';\r\n}\r\n\r\nexport const latinOnly = (value) => {\r\n    let re = new RegExp('^[a-zA-Z0-9]+$');\r\n    if(re.test(value)) {\r\n        return undefined;\r\n        // return 'латинские';\r\n    }\r\n    return 'Допустимы только латинские символы';\r\n}\r\n\r\nexport const isEmail = (value) => {\r\n    var reg = /^([A-Za-z0-9_\\-\\.])+\\@([A-Za-z0-9_\\-\\.])+\\.([A-Za-z]{2,4})$/;\r\n    if(reg.test(value) == false) {\r\n        return 'Введите корректный e-mail';\r\n     }\r\n\r\n    return undefined;\r\n}\r\n\r\nexport const mustBrSelected = (value) => {\r\n    console.log(value)\r\n    return value\r\n}\r\n\r\nexport const maxLengthCreator = (maxLength) => (value) => {\r\n    if (value && value.length > maxLength ) return 'Максимальное количесво символов: '+maxLength;\r\n    return undefined;\r\n}\r\n\r\nexport const currentLnghtCreator = (currentLenght) => (value) => {\r\n    if (value && value.length == currentLenght) return undefined;\r\n    return 'Количество смволов должно бать: '+currentLenght+ '(сейчас: '+value.length+')';\r\n}\r\n\r\nexport const phoneNumberValidator = (value) => {\r\n    if (value.length < 12) {\r\n        return 'Номер телефона слишком короткий (пример: 375 29 1234567)';\r\n    }\r\n    if (value.length > 12) {\r\n        return 'Номер телефона слишком длинный (пример: 375 29 1234567)';\r\n    }\r\n    return undefined;\r\n}\r\n\r\n// export const maxLength = value => {\r\n//     if (value && value.length > 13 ) return 'Максимальное количесво символов 13';\r\n    \r\n//     return undefined;\r\n// }","import React, {useState} from 'react';\r\nimport Navbar from 'react-bootstrap/Navbar';\r\nimport Nav from 'react-bootstrap/Nav';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nconst Header = (props) => {\r\n\r\n    const logout = () => {\r\n        props.logout();\r\n    }\r\n\r\n    return (\r\n        <Navbar bg=\"light\" expand=\"lg\">\r\n            <Navbar.Brand href=\"#home\">ArtCRM</Navbar.Brand>\r\n            <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n            <Navbar.Collapse id=\"basic-navbar-nav\">\r\n                <Nav className=\"mr-auto\">\r\n                    <Nav.Link to=\"\">\r\n                        <NavLink to=\"/catalog\">Каталог</NavLink>\r\n                    </Nav.Link>\r\n                    {props.isAuth ?\r\n                        <Nav.Link to=\"\">\r\n                            <NavLink to=\"/catalog\" onClick={logout}>Выход</NavLink>\r\n                        </Nav.Link>\r\n                        :\r\n                        <Nav.Link to=\"\">\r\n                            <NavLink to=\"/login\">Вход</NavLink>\r\n                        </Nav.Link>\r\n                    }\r\n                    {props.status === 'admin' ?\r\n                        <Nav.Link to=\"\">\r\n                            <NavLink to=\"/adminPanel\">Админка</NavLink>\r\n                        </Nav.Link> : null}\r\n                    {props.status === 'admin' ?\r\n                        <Nav.Link to=\"\">\r\n                            <NavLink to=\"/orders\">Заказы</NavLink>\r\n                        </Nav.Link> : null}\r\n                    {props.status === 'admin' ?\r\n                        <Nav.Link to=\"\">\r\n                            <NavLink to=\"/tasks\">Задачи</NavLink>\r\n                        </Nav.Link> : null}\r\n                </Nav>\r\n            </Navbar.Collapse>\r\n        </Navbar>\r\n    );\r\n}\r\n\r\nexport default Header;","import * as axios from 'axios';\r\n\r\n//http://www.artcrm.h1n.ru/api/auth/me\r\nconst instanse = axios.create({\r\n    withCredentials: true,\r\n    baseURL: 'http://www.artcrm.h1n.ru/api/',\r\n    headers: {\r\n        'Content-Type': 'multipart/form-data',\r\n    }\r\n});\r\n\r\nexport const userAPI = {\r\n    authMe() {\r\n        return instanse.get('auth/me')\r\n            .then(response => {\r\n                // console.log(response);\r\n                return response.data\r\n            });\r\n    },\r\n    logout() {\r\n        // console.log('start api');\r\n        return instanse.get('auth/logout')\r\n            .then(response => {\r\n                // console.log(response);\r\n                return response;\r\n            });\r\n    },\r\n    login(phone, password, rememberMe) {\r\n        let data = { phone, password, rememberMe };\r\n        // console.log(data);\r\n        return instanse.post('auth/login', data).then(response => {\r\n            return response.data\r\n        });\r\n    }\r\n}\r\n\r\nexport const adminAPI = {\r\n    getProcessList(currentPage, totalCount) {\r\n        return instanse.get('process/getList?page=' + currentPage + '&count=' + totalCount)\r\n            .then(response => {\r\n                console.log(response)\r\n                return response.data\r\n            });\r\n    },\r\n\r\n    getProvidersList(currentPage, totalCount) {\r\n        return instanse.get('provider/getList?page=' + currentPage + '&count=' + totalCount)\r\n            .then(response => {\r\n                console.log(response)\r\n                return response.data\r\n            });\r\n    },\r\n\r\n    getProductTypeList() {\r\n        // console.log('start adminAPI-> getPage('+page+')');\r\n        return instanse.get('product/types')\r\n            .then(response => {\r\n                return response.data\r\n            });\r\n    },\r\n    crateNewProductType(data) {\r\n        return instanse.post('product/createType', data)\r\n            .then(response => {\r\n                // console.log(response);\r\n                return response;\r\n            });\r\n    },\r\n    deleteProductType(id) {\r\n        // console.log('deleteProductType');\r\n        return instanse.post('product/deleteType', id)\r\n            .then(response => {\r\n                return response;\r\n            });\r\n    },\r\n    loadProductTypeItemList(id, type, rememberMe) {\r\n        const data = { id: id, type: type }\r\n        return instanse.post('product/createTaskToProductTypeItem', data)\r\n            .then(response => {\r\n                // console.log(response);\r\n                // console.log(id);\r\n                return response;\r\n            });\r\n    },\r\n    getSettingsList() {\r\n        return instanse.get('settings/getSettingsList')\r\n            .then(response => {\r\n                // console.log(response);\r\n                return response;\r\n            });\r\n    },\r\n    getConstantList() {\r\n        return instanse.get('settings/getConstantList')\r\n            .then(response => {\r\n                console.log(response);\r\n                return response;\r\n            });\r\n    },\r\n    createNewProvider(formData) {\r\n        return instanse.post('provider/create', formData)\r\n            .then(response => {\r\n                return response;\r\n            });\r\n    }\r\n}\r\n\r\nexport const universalAPI = {\r\n    updateFieldRecord(params) {\r\n        return instanse.post('universal/updateField', params)\r\n            .then(response => {\r\n                // console.log(response);\r\n                return params;\r\n            });\r\n    }\r\n}\r\n","import * as axios from 'axios';\r\nimport { userAPI } from './../api/api';\r\nimport { stopSubmit } from 'redux-form';\r\n\r\nconst SET_USER_DATA = 'user/SET_USER_DATA';\r\nconst SET_NEW_PHONE = 'user/SET_NEW_PHONE';\r\nconst SET_NEW_PASS = 'user/SET_NEW_PASS';\r\nconst TOGGLE_IS_LOGIN_PROGRESS = 'user/TOGGLE_IS_LOGIN_PROGRESS';\r\n\r\nlet initialState = {\r\n    phone: null,\r\n    password: null,\r\n    name: null,\r\n    userId: null,\r\n    status: null,\r\n    isAuth: false,\r\n    isLoginInProgress: false\r\n};\r\n// const initialState = [];\r\n\r\nconst userReducer = (state = initialState, action) => {\r\n    let stateCopy;\r\n    switch (action.type) {\r\n        case SET_USER_DATA:\r\n            if (action.userData.resultCode == 0) {\r\n                stateCopy = { ...state };\r\n                // console.log(action.userData.data);\r\n                if (action.userData.data.userId !== null) {\r\n                    stateCopy.isAuth = true;\r\n                } else {\r\n                    stateCopy.isAuth = false;\r\n                }\r\n                \r\n                stateCopy.isLoginInProgress = false;\r\n                stateCopy.name = action.userData.data.User;\r\n                stateCopy.userId = action.userData.data.userId;\r\n                stateCopy.phone = action.userData.data.phone;\r\n                stateCopy.password = action.userData.data.password;\r\n                stateCopy.status = action.userData.data.status;\r\n                // console.log('Auth OK!:'+stateCopy.isAuth);\r\n                return stateCopy;\r\n            } else {\r\n                console.log(action.userData.error);\r\n                return state;\r\n            }\r\n            \r\n\r\n        case SET_NEW_PHONE:\r\n            stateCopy = { ...state };\r\n            stateCopy.phone = action.newPhone;\r\n            return stateCopy;\r\n\r\n        case SET_NEW_PASS:\r\n            stateCopy = { ...state };\r\n            stateCopy.password = action.newPass;\r\n            return stateCopy;\r\n\r\n        case TOGGLE_IS_LOGIN_PROGRESS:\r\n            return { ...state, isLoginInProgress: action.isFetching }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const togleLoginProgress = (isFetching) => ({ type: TOGGLE_IS_LOGIN_PROGRESS, isFetching });\r\nexport const setUser = (userData) => ({ type: SET_USER_DATA, userData });\r\nexport const onPhoneChange = (newPhone) => ({ type: SET_NEW_PHONE, newPhone });\r\nexport const onPassChange = (newPass) => ({ type: SET_NEW_PASS, newPass });\r\n// export const setCategorysAC = (categorysObject) => ({type: SET_CATEGORYS, data: categorysObject});\r\n\r\n//THUNKs:\r\nexport const getAuthMeThunkCreator = () => {\r\n    return (dispatch) => {\r\n        // dispatch(toggleIsFetching(isFetching: true)); // запускаем спинер\r\n        userAPI.authMe().then(response => {\r\n            // сохраняем ответ с сервера\r\n            dispatch(setUser(response));\r\n            // dispatch(toggleIsFetching(isFetching: true)); // stop спинер\r\n        });\r\n    }\r\n}\r\n\r\nexport const getLoginThunkCreator = (phone, password, rememberMe) => {\r\n    return (dispatch) => {\r\n        // dispatch(togleLoginProgress(true)); // запускаем спинер\r\n        userAPI.login(phone, password, rememberMe).then(response => {\r\n            // console.log(response);\r\n            // сохраняем ответ с сервера\r\n            if (response.resultCode === 0) {\r\n                dispatch(setUser(response));\r\n            } else {\r\n                let action = stopSubmit('login', {_error: response.messages[0]});\r\n                dispatch(action);\r\n            }\r\n            \r\n            // dispatch(togleLoginProgress(false)); // stop спинер\r\n        });\r\n    }\r\n}\r\nexport const logout = () => {\r\n    // console.log('logOut in reducer');\r\n    return (dispatch) => {\r\n        userAPI.logout().then(response => {\r\n            // console.log(response);\r\n            let data = {}\r\n            data['data'] = {\r\n                phone: null,\r\n                password: null,\r\n                name: null,\r\n                userId: null,\r\n                status: null,\r\n                isAuth: false\r\n            };\r\n            data['resultCode'] = 0;\r\n            dispatch(setUser(data));\r\n        });\r\n    }\r\n}\r\n\r\nexport default userReducer;","import {createSelector} from 'reselect';\r\n\r\nexport const getAuth = (state) => {\r\n    return state.user.isAuth\r\n}\r\n\r\nexport const getStatus = (state) => {\r\n    return state.user.status\r\n} \r\n\r\n// reselect: ///////////////////////////////////////\r\nexport const getSuperStatus = createSelector(getStatus, getAuth, \r\n    (users) => {\r\n        return users.filter(u=>true);\r\n    }\r\n)\r\n////////////////////////////////////////////////////","import {connect} from 'react-redux';\r\nimport Header from './Header';\r\nimport {setUser, logout} from './../../redux/userReducer';\r\nimport {getAuth, getStatus} from './../../redux/userSelectors';\r\n\r\nconst mapStateToProps =  (state) => ({\r\n    isAuth: getAuth(state),\r\n    status: getStatus(state)\r\n    // долить юзернэйм\r\n});\r\n\r\nexport default connect( mapStateToProps, {setUser, logout} )(Header);","import React, { Component } from 'react';\r\nimport {FormGroup, FormControl} from 'react-bootstrap';\r\nimport Form from 'react-bootstrap/Form';\r\n// import ControlLabel from 'react-bootstrap/ControlLabel';\r\n\r\nexport class FieldFormInput extends Component {\r\n\r\n  render () {\r\n    //   console.log(this.props)\r\n    const { placeholder, type, input, meta, required} = this.props;\r\n\r\n    let hasError = false;\r\n    if (this.props.meta) {\r\n        hasError = this.props.meta.error && this.props.meta.touched;\r\n    }\r\n    \r\n    const isRequired = () => {\r\n        // console.log(required);\r\n        if (required) {\r\n            return (\r\n                <FormControl required \r\n                    type={type} \r\n                    placeholder={placeholder} \r\n                    value={input.value} \r\n                    onChange={input.onChange} \r\n                    isInvalid={hasError}/>\r\n            );\r\n        } else {\r\n            return (\r\n                <FormControl \r\n                    type={type} \r\n                    placeholder={placeholder} \r\n                    value={input.value} \r\n                    onChange={input.onChange} />\r\n            );\r\n        }\r\n    }\r\n\r\n    return (\r\n      <FormGroup controlId={input.name} validationState={meta.error ? 'error' : 'success'}>\r\n        <Form.Label>{this.props.children}</Form.Label>\r\n        {isRequired()}\r\n        <Form.Control.Feedback type=\"invalid\">\r\n            {this.props.meta.error}\r\n        </Form.Control.Feedback>\r\n      </FormGroup>\r\n    );\r\n  }\r\n}\r\n\r\nexport class FieldFormCheckbox extends Component {\r\n    \r\n    render () {\r\n        const { placeholder, type, input, meta, required} = this.props;\r\n        return (\r\n            <Form.Group controlId={input.name}>\r\n                <Form.Label>{this.props.children}</Form.Label>\r\n                <FormControl \r\n                    // as=\"checkbox\"\r\n                    type={type} \r\n                    placeholder={placeholder} \r\n                    // value={input.value} \r\n                    onChange={input.onChange} />\r\n            </Form.Group>\r\n            \r\n        );\r\n    }\r\n}","import React, { useState } from 'react';\r\nimport Form from 'react-bootstrap/Form';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Alert from 'react-bootstrap/Alert';\r\nimport { reduxForm, Field } from 'redux-form';\r\nimport { FieldFormInput } from './FieldFormComponent';\r\nimport { requiredField, maxLengthCreator } from './../../../../utils/validators/validators';\r\n\r\nconst maxLength10 = maxLengthCreator(13);\r\n\r\nconst LoginForm = (props) => {\r\n    const [validated, setValidated] = useState(false);\r\n    // const [setValidated] = useState(false);\r\n    // const [validated] = useState(true); // запускает проверку сразу\r\n\r\n    const handleSubmit = (event) => {\r\n        console.log(event)\r\n        // const form = event.currentTarget;\r\n        // if (form.checkValidity() === false) {\r\n        //     event.preventDefault();\r\n        //     event.stopPropagation();\r\n        // }\r\n\r\n        // setValidated(true);\r\n\r\n    };\r\n\r\n\r\n\r\n    console.log(props);\r\n    return (\r\n        <Form noValidate validated={validated} onSubmit={props.handleSubmit}>\r\n            <Field type=\"phone\"\r\n                name=\"phone\"\r\n                placeholder=\"+3751234567\"\r\n                required\r\n                validate={[requiredField, maxLength10]}\r\n                component={FieldFormInput}>Телефон</Field>\r\n\r\n            <Field type=\"password\"\r\n                name=\"password\"\r\n                placeholder=\"Введите пароль\"\r\n                required\r\n                validate={[requiredField]}\r\n                component={FieldFormInput}>Пароль</Field>\r\n            \r\n        <div className=\"form-check\">\r\n            <Field component=\"input\" \r\n                id=\"rememberMe\" \r\n                className=\"form-check-input\" \r\n                name=\"rememberMe\" \r\n                type=\"checkbox\"/>\r\n            <label for=\"rememberMe\">Оставаться в системе</label>\r\n        </div>\r\n                { props.error ? \r\n                <Alert key=\"1\" variant=\"danger\">\r\n                    {props.error}\r\n                </Alert> : null }\r\n\r\n            <Button type=\"submit\">Войти</Button>\r\n        </Form>\r\n    );\r\n}\r\n\r\nconst LoginReduxForm = reduxForm({\r\n    form: 'login'\r\n})(LoginForm);\r\n\r\nexport default LoginReduxForm;","\r\nimport {connect} from 'react-redux';\r\nimport LoginForm from './LoginForm';\r\n// import {setUser, onPhoneChange, onPassChange, togleLoginProgress, getLoginThunkCreator} from '../../../redux/userReducer';\r\n\r\nlet mapStateToProps = (state) => {\r\n    console.log(state);\r\n    return {\r\n        user: state.user\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, \r\n    {}) \r\n    (LoginForm);","import React, { Component } from 'react';\r\nimport Form from 'react-bootstrap/Form';\r\nimport Button from 'react-bootstrap/Button';\r\n// import { userAPI } from './../../../api/api';\r\nimport {reduxForm} from 'redux-form';\r\nimport {requiredField} from './../../../utils/validators/validators';\r\nimport LoginFormContainer from './LoginForm/LoginFormContainer';\r\n\r\nclass Login extends React.Component {\r\n    \r\n    render() {\r\n        // console.log(this.props);\r\n        // console.log('Login->render()');\r\n\r\n        // const onPhoneChange = (e) => {\r\n        //     let phone = e.target.value;\r\n        //     this.props.onPhoneChange(phone);\r\n        // }\r\n        // const onPassChange = (e) => {\r\n        //     let newPass = e.target.value;\r\n        //     this.props.onPassChange(newPass);\r\n        // }\r\n        // const setUser = () => {\r\n        //     const phone = this.props.user.phone;\r\n        //     const password = this.props.user.password;\r\n        //     this.props.getLoginThunkCreator(phone, password);\r\n            \r\n        // }\r\n\r\n        // const loginReduxForm = reduxForm({form: 'login'})(LoginForm2);  \r\n            // const LoginForm2 =  (props) => {\r\n            //     return (\r\n            //         <Form>\r\n            //             <div>\r\n            //                 <input placeholder=\"phone\"></input>\r\n            //             </div>\r\n            //             <div>\r\n            //                 <input placeholder=\"pass\"></input>\r\n            //             </div>\r\n            //             <div>\r\n            //                 <button>ok</button>\r\n            //             </div>\r\n            //         </Form>\r\n            //     );\r\n            // }     \r\n\r\n            // const LoginForm = (props) => {\r\n            //     return (\r\n            //         <Form>\r\n            //             <Form.Group controlId=\"formBasicEmail\">\r\n            //                 <Form.Label>Телефон</Form.Label>\r\n            //                 <Form.Control type=\"phone\" placeholder=\"+3751234567\" \r\n            //                     onChange={onPhoneChange} value={this.props.user.phone} \r\n            //                     validated={requiredField} />\r\n            //                 <Form.Text className=\"text-muted\">\r\n            //                     Мы никогда не передадим ваш номер телефона кому-либо еще.\r\n            //                 </Form.Text>\r\n            //             </Form.Group>\r\n\r\n            //             <Form.Group controlId=\"formBasicPassword\">\r\n            //                 <Form.Label>Пароль</Form.Label>\r\n            //                 <Form.Control type=\"password\" placeholder=\"Введите пароль\" \r\n            //                 onChange={onPassChange} value={this.props.user.password}/>\r\n            //             </Form.Group>\r\n            //             <Form.Group controlId=\"formBasicCheckbox\">\r\n            //                 <Form.Check type=\"checkbox\" label=\"Оставаться в системе\" />\r\n            //             </Form.Group>\r\n            //             <Button variant=\"primary\" disabled={this.props.user.isLoginInProgress} onClick={setUser}>\r\n            //                 Войти\r\n            //             </Button>\r\n            //         </Form>\r\n            //     );\r\n        // }\r\n\r\n        const onSubmit = (formData) => {\r\n            console.log(formData);\r\n            // debugger\r\n            this.props.getLoginThunkCreator(formData.phone, formData.password, formData.rememberMe);\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <LoginFormContainer onSubmit={onSubmit}/>\r\n                <div>Register</div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Login;","\r\nimport {connect} from 'react-redux';\r\nimport Login from './Login';\r\nimport {togleLoginProgress, getLoginThunkCreator} from '../../../redux/userReducer';\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        user: state.user\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, \r\n    {togleLoginProgress, getLoginThunkCreator}) \r\n    (Login);","import React, { useState, useEffect } from 'react';\r\n\r\nconst EditebleSpan = React.memo((props) => {\r\n\r\n    let [editeMode, setEditeMode] = useState(false);\r\n    let [inputValue, changeValue] = useState(props.value);\r\n\r\n    useEffect( () => {\r\n        changeValue(props.value);\r\n    }, [props.value] );\r\n\r\n    const activateEditemde = () => {\r\n        setEditeMode(true);\r\n    }\r\n\r\n    const deactivateEditeMode = () => {\r\n        setEditeMode(false);\r\n        props.updateFieldRecord({\r\n            value: inputValue,\r\n            table: props.table,\r\n            fieldName: props.fieldName,\r\n            itemId: props.itemId\r\n        });\r\n        props.reRenderComponent(props.componentName);\r\n    }\r\n\r\n    const onValueChange = (e) => {\r\n        changeValue(e.target.value);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {!editeMode ? (\r\n                <div>\r\n                    <span onDoubleClick={activateEditemde}>{props.value}</span>\r\n                </div>\r\n            ) : (\r\n                    <div>\r\n                        <input autoFocus={true} onChange={onValueChange} onBlur={deactivateEditeMode}\r\n                        type=\"text\" value={inputValue} />\r\n                    </div>\r\n                )}\r\n        </div>\r\n    );\r\n})\r\n\r\nexport default EditebleSpan;","import {universalAPI} from './../api/api';\r\nconst UPDATE_FILD_VALUE = 'UPDATE_FILD_VALUE';\r\n\r\nlet initialState = {\r\n    value: null\r\n};\r\n\r\nconst universalReducer = (state = initialState, action) => {\r\n    let stateCopy;\r\n    switch (action.type) {\r\n        case UPDATE_FILD_VALUE:\r\n            console.log('UPDATE_FILD_VALUE');\r\n            stateCopy = {...state};\r\n            console.log(action.params.value);\r\n            stateCopy.value = action.params.value;\r\n            return stateCopy;\r\n\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const updateFieldValue = (params) => ({ type: UPDATE_FILD_VALUE,  params});\r\n\r\nexport const updateFieldRecord = (params) => {\r\n    return (dispatch) =>{\r\n        dispatch(updateFieldValue(params));\r\n        universalAPI.updateFieldRecord(params).then(response => {\r\n            // console.log('start dispatch!');\r\n            // dispatch(updateFieldValue(params));\r\n            // console.log('stop dispatch!');\r\n        });\r\n    }\r\n}\r\n\r\nexport default universalReducer;","import {connect} from 'react-redux';\r\nimport EditebleSpan from './EditebleSpanHOC';\r\nimport {updateFieldRecord} from './../../../redux/universalReducer';\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        state\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, {updateFieldRecord}) \r\n    (EditebleSpan);","import React from 'react';\r\nimport Table from 'react-bootstrap/Table';\r\nimport Accordion from 'react-bootstrap/Accordion';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Card from 'react-bootstrap/Card';\r\nimport InputGroup from 'react-bootstrap/InputGroup';\r\nimport FormControl from 'react-bootstrap/FormControl';\r\nimport Form from 'react-bootstrap/Form';\r\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\r\nimport DropdownButton from 'react-bootstrap/DropdownButton';\r\nimport Dropdown from 'react-bootstrap/Dropdown';\r\nimport EditebleSpanContainer from './../../../universal/EditebleSpan/EditebleSpanContainer';\r\n\r\n\r\nclass MainCatalog extends React.Component {\r\n    componentDidMount() {\r\n        if (!this.props.admin.contentList.includes(this.props.admin.handleSelect)) {\r\n            this.props.admin.contentList.push(this.props.admin.handleSelect);\r\n            this.props.getProductTypeList();\r\n        }\r\n    }\r\n    componentDidUpdate() {\r\n        // debugger;\r\n        if (!this.props.admin.contentList.includes(this.props.admin.handleSelect)) {\r\n            this.props.admin.contentList.push(this.props.admin.handleSelect);\r\n            this.props.getProductTypeList();\r\n        }\r\n    }\r\n\r\n    state = {\r\n        name: null,\r\n        title: null,\r\n        group: null\r\n    }\r\n\r\n    changeInput = (e) => {\r\n        let text = e.target.value;\r\n        let field = e.target.getAttribute('aria-label');\r\n        this.state[field] = text;\r\n        this.setState(\r\n            this.state\r\n        )\r\n    }\r\n\r\n    createNewType = () => {\r\n        this.props.crateNewProductType(this.state);\r\n    }\r\n\r\n    deleteProductTypeItem = (evt,evtKey) => {\r\n        // console.log(evt);\r\n        let id = evtKey.currentTarget.getAttribute('eventId');\r\n        if (evt === 'deleteItem') {\r\n            this.props.deleteProductType(id);\r\n        } else {\r\n            console.log(evt+': '+id);\r\n            this.props.loadProductTypeItemList(id, evt);\r\n        }\r\n        \r\n    }\r\n\r\n    render() {\r\n        // debugger;\r\n        let lists;\r\n        if (this.props.admin.content != null) {\r\n            lists = this.props.admin.content.map((item) => {\r\n                return (\r\n                    <tr>\r\n                        <td>{item['id']}</td>\r\n                        <td><EditebleSpanContainer \r\n                            value={item['title']} \r\n                            fieldName=\"title\"\r\n                            table = \"Product_types\"\r\n                            itemId = {item['id']}\r\n                            componentName = \"mainCatalog\"\r\n                            reRenderComponent = {this.props.reRenderComponent}\r\n                            />\r\n                        </td>\r\n                        <td>{item['name']}</td>\r\n                        <td>{item['groupName']}</td>\r\n                        <td>\r\n                        <ButtonGroup size=\"sm\">\r\n                            <DropdownButton size=\"sm\" as={ButtonGroup} title=\"\" id=\"bg-nested-dropdown\" onSelect={this.deleteProductTypeItem}>\r\n                                <Dropdown.Item size=\"sm\" eventKey=\"loadList\" eventId={item['id']}>\r\n                                    Загрузить список\r\n                                </Dropdown.Item>\r\n                                <Dropdown.Item size=\"sm\" eventKey=\"getDescriptions\" eventId={item['id']}>Получить описания</Dropdown.Item>\r\n                                <Dropdown.Item size=\"sm\" eventKey=\"deleteItem\" eventId={item['id']} >Удалить</Dropdown.Item>\r\n                                <Dropdown.Item size=\"sm\" eventKey=\"getInfo\" eventId={item['id']}>Информация</Dropdown.Item>\r\n                            </DropdownButton>\r\n                        </ButtonGroup>\r\n                        </td>\r\n                    </tr>\r\n                );\r\n            });\r\n        } else {\r\n            lists = null;\r\n        }\r\n\r\n\r\n\r\n        console.log(this.props);\r\n        console.log(this.state);\r\n\r\n        if (this.props.admin.handleSelect === 'mainCatalog') {\r\n            return (\r\n                <div>\r\n                    <Accordion>\r\n                        <Card>\r\n                            <Card.Header>\r\n                                <Accordion.Toggle as={Button} variant=\"button\" eventKey=\"0\">\r\n                                    Создать\r\n                                    </Accordion.Toggle>\r\n                            </Card.Header>\r\n                            <Accordion.Collapse eventKey=\"0\">\r\n                                <Card.Body>\r\n\r\n                                    <InputGroup size=\"sm\" className=\"mb-3\">\r\n                                        <InputGroup.Prepend>\r\n                                            <InputGroup.Text id=\"basic-addon1\">Название</InputGroup.Text>\r\n                                        </InputGroup.Prepend>\r\n                                        <FormControl\r\n                                            placeholder=\"Введите название группы\"\r\n                                            aria-label=\"title\"\r\n                                            aria-describedby=\"basic-addon1\"\r\n                                            value = {this.state.title}\r\n                                            onChange = {this.changeInput}\r\n                                        />\r\n                                    </InputGroup>\r\n                                    <InputGroup size=\"sm\" className=\"mb-3\">\r\n                                        <InputGroup.Prepend>\r\n                                            <InputGroup.Text id=\"basic-addon2\">Псевдоним</InputGroup.Text>\r\n                                        </InputGroup.Prepend>\r\n                                        <FormControl\r\n                                            placeholder=\"Введите Псевдоним группы\"\r\n                                            aria-label=\"name\"\r\n                                            aria-describedby=\"basic-addon2\"\r\n                                            onChange = {this.changeInput}\r\n                                        />\r\n                                    </InputGroup>\r\n\r\n                                    <InputGroup size=\"sm\" className=\"mb-3\">\r\n                                        <InputGroup.Prepend size=\"sm\">\r\n                                            <InputGroup.Text size=\"sm\" id=\"basic-addon3\">Группа</InputGroup.Text>\r\n                                        </InputGroup.Prepend>\r\n                                        <Form.Control as=\"select\" size=\"sm\" custom \r\n                                            aria-describedby=\"basic-addon3\" \r\n                                            aria-label=\"group\"\r\n                                            onChange = {this.changeInput}\r\n                                            >\r\n                                            <option>Выберете...</option>\r\n                                            <option>Техника для кухни</option>\r\n                                            <option>Техника для дома</option>\r\n                                            <option>Сантехника</option>\r\n                                            <option>Водоснабжение</option>\r\n                                            <option>Климат</option>\r\n                                            <option>Стройматериалы</option>\r\n                                        </Form.Control>\r\n                                    </InputGroup>\r\n\r\n                                    <Button variant=\"primary\" onClick={this.createNewType}>\r\n                                        Создать\r\n                                    </Button>\r\n\r\n                                </Card.Body>\r\n                            </Accordion.Collapse>\r\n                        </Card>\r\n                    </Accordion>\r\n\r\n                    <Table striped bordered hover size=\"sm\">\r\n                        <thead>\r\n                            <tr>\r\n                                <th>id</th>\r\n                                <th>Название</th>\r\n                                <th>Псевдоним</th>\r\n                                <th>Группа</th>\r\n                                <th></th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {lists}\r\n                        </tbody>\r\n                    </Table>\r\n                </div>\r\n            );\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n}\r\n\r\nexport default MainCatalog;","import { adminAPI } from './../api/api';\r\nimport { stopSubmit } from 'redux-form';\r\n\r\nconst SET_HANDLE_SELECT = 'SET_HANDLE_SELECT';\r\nconst SET_PRODUCT_TYPES = 'SET_PRODUCT_TYPES';\r\nconst ADD_NEW_PRODUCT_TYPE = 'ADD_NEW_PRODUCT_TYPE';\r\nconst RERENDER_COMPONENT = 'RERENDER_COMPONENT';\r\nconst SET_PROCESS = 'SET_PROCESS';\r\nconst SET_SETTINGS = 'SET_SETTINGS';\r\nconst TAB_IS_LOADED = 'TAB_IS_LOADED';\r\nconst SET_PROCESS_COUNT = 'SET_PROCESS_COUNT';\r\nconst SET_CURRENT_PROCESS_PAGE = 'SET_CURRENT_PROCESS_PAGE';\r\nconst SET_PROVIDERS = 'SET_PROVIDERS';\r\nconst SET_CONSTANTS = 'SET_CONSTANTS';\r\n\r\nlet initialState = {\r\n    handleSelect: null,\r\n    contentList: [],\r\n    content: null,\r\n    process: [],\r\n    processData: {\r\n        pageSize: 10, // количество процессов на стронице\r\n        totalProcessCount: null, // общее количество процессов\r\n        currentPage: 1 // текущая страница\r\n    },\r\n    settings: [],\r\n    providers: [],\r\n    providersData: {\r\n        pageSize: 10, // количество поставщиков на стронице\r\n        totalProcessCount: null, // общее количество поставщиков\r\n        currentPage: 1 // текущая страница\r\n    },\r\n    constants: []\r\n};\r\n\r\nconst adminReducer = (state = initialState, action) => {\r\n    let stateCopy;\r\n    switch (action.type) {\r\n        case SET_CONSTANTS:\r\n            stateCopy = { ...state };\r\n            stateCopy.constants = action.data.data;\r\n            return stateCopy;\r\n\r\n        case SET_PROVIDERS:\r\n            stateCopy = { ...state };\r\n            stateCopy.providers = action.data.data;\r\n            return stateCopy;\r\n\r\n        case SET_CURRENT_PROCESS_PAGE:\r\n            // console.log('SET_CURRENT_PROCESS_PAGE: '+action.currentProcessPage);\r\n            stateCopy = { ...state };\r\n            stateCopy.processData.currentPage = action.currentProcessPage;\r\n            // Очищаем список загруженных страниц для перезагрузки\r\n            stateCopy.contentList = stateCopy.contentList.filter(item => item !== 'process');\r\n            // console.log(state.processData.currentPage)\r\n            // console.log(state.processData.totalProcessCount)\r\n            // getProcessList(state.processData.currentPage, state.processData.totalProcessCount);\r\n            return stateCopy\r\n\r\n        case SET_PROCESS_COUNT:\r\n            stateCopy = { ...state };\r\n            stateCopy.processData.totalProcessCount = action.processCount;\r\n            return stateCopy;\r\n\r\n        case TAB_IS_LOADED: \r\n            stateCopy = { ...state };\r\n            stateCopy.contentList.push(stateCopy.handleSelect);\r\n\r\n            return stateCopy;\r\n\r\n        case SET_HANDLE_SELECT:\r\n            stateCopy = { ...state };\r\n            stateCopy.handleSelect = action.eventKey;\r\n\r\n            // if (!stateCopy.contentList.includes(action.eventKey)) {\r\n            //     console.log(action.eventKey);\r\n            //     getPageThunkCreator(action.eventKey);\r\n            // }\r\n            \r\n            return stateCopy;\r\n\r\n        case SET_PRODUCT_TYPES:\r\n            stateCopy = { ...state };\r\n            stateCopy.content = action.data.data;\r\n            return stateCopy;\r\n\r\n        case SET_PROCESS:\r\n            stateCopy = { ...state };\r\n            stateCopy.process = action.data.data;\r\n            return stateCopy;\r\n\r\n        case SET_SETTINGS:\r\n            stateCopy = { ...state };\r\n            stateCopy.settings = action.data.data;\r\n            return stateCopy;\r\n\r\n        case RERENDER_COMPONENT:\r\n            stateCopy = { ...state };\r\n            console.log(action.componentName);\r\n            stateCopy.contentList = stateCopy.contentList.filter(item => item !== action.componentName);\r\n            return stateCopy;\r\n\r\n        case ADD_NEW_PRODUCT_TYPE:\r\n            stateCopy = { ...state };\r\n            // stateCopy.contentList\r\n\r\n            // let value = 'mainCatalog'\r\n            // let arr = [1, 2, 3, 4, 5, 3]\r\n            stateCopy.contentList = stateCopy.contentList.filter(item => item !== 'mainCatalog');\r\n            console.log(stateCopy)\r\n\r\n            return stateCopy;\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const setHandleSelect = (eventKey) => ({ type: SET_HANDLE_SELECT, eventKey });\r\nexport const setProductTypes = (data) => ({ type: SET_PRODUCT_TYPES, data });\r\nexport const addNewProductType = () => ({type: ADD_NEW_PRODUCT_TYPE});\r\nexport const reRenderComponent = (componentName) => ({type: RERENDER_COMPONENT, componentName});\r\nexport const setProcess = (data) => ({ type: SET_PROCESS, data });\r\nexport const setSettings = (data) => ({ type: SET_SETTINGS, data });\r\nexport const tabIsLoaded = () => ({type: TAB_IS_LOADED})\r\nconst setPocessCount = (processCount) => ({type: SET_PROCESS_COUNT, processCount});\r\nexport const setCurrentProcessPage = (currentProcessPage) => ({type: SET_CURRENT_PROCESS_PAGE, currentProcessPage})\r\nexport const setProviders = (data) => ({ type: SET_PROVIDERS, data });\r\nexport const setConstants = (data) => ({ type: SET_CONSTANTS, data });\r\n\r\nexport const getProductTypeList = () => {\r\n    return (dispatch) => {\r\n        // dispatch(togleLoginProgress(true)); // запускаем спинер\r\n        adminAPI.getProductTypeList().then(response => {\r\n            console.log(response);\r\n            // сохраняем ответ с сервера\r\n            dispatch(setProductTypes(response));\r\n            // dispatch(togleLoginProgress(false)); // stop спинер\r\n        });\r\n    }\r\n}\r\n\r\nexport const crateNewProductType = (data) => {\r\n    return (dispatch) =>{\r\n        adminAPI.crateNewProductType(data).then(response => {\r\n            // Добавить обновление страници\r\n            dispatch(addNewProductType());\r\n            dispatch(addNewProductType());\r\n        });\r\n    }\r\n}\r\n\r\nexport const deleteProductType = (id) => {\r\n    console.log('deleteProductType')\r\n    return (dispatch) =>{\r\n        adminAPI.deleteProductType(id).then(response => {\r\n            dispatch(addNewProductType());\r\n        });\r\n    }\r\n}\r\n\r\nexport const loadProductTypeItemList = (id, type) => {\r\n    return (dispatch) =>{\r\n        adminAPI.loadProductTypeItemList(id, type).then(response => {\r\n            dispatch(addNewProductType());\r\n        });\r\n    }\r\n}\r\n\r\nexport const getProcessList = (currentPage, totalCount) => {\r\n    console.log('processData start')\r\n    return (dispatch) =>{\r\n        adminAPI.getProcessList(currentPage, totalCount).then(response => {\r\n            dispatch(setProcess(response));\r\n            // console.log(response.processCount)\r\n            dispatch(setPocessCount(response.processCount));\r\n            dispatch(tabIsLoaded());\r\n        });\r\n    }\r\n}\r\n\r\nexport const getProvidersList = (currentPage, totalCount) => {\r\n    return (dispatch) =>{\r\n        adminAPI.getProvidersList(currentPage, totalCount).then(response => {\r\n            // console.log(response)\r\n            dispatch(setProviders(response));\r\n            // dispatch(setPocessCount(response.processCount));\r\n            // dispatch(tabIsLoaded());\r\n        });\r\n    }\r\n}\r\n\r\nexport const getSettingsList = () => {\r\n    return (dispatch) =>{\r\n        adminAPI.getSettingsList().then(response => {\r\n            dispatch(setSettings(response));\r\n            // dispatch(reRenderComponent(\"settings\"));\r\n        });\r\n    }\r\n}\r\n\r\nexport const getConstantList = () => {\r\n    return (dispatch) =>{\r\n        adminAPI.getConstantList().then(response => {\r\n            dispatch(setConstants(response.data));\r\n            // dispatch(reRenderComponent(\"settings\"));\r\n        });\r\n    }\r\n}\r\n\r\nexport const createNewProvider = (formData) => {\r\n    return (dispatch) => {\r\n        adminAPI.createNewProvider(formData).then( response => {\r\n            if (response.data.resultCode === 0) {\r\n                console.log(response);\r\n            } else {\r\n                console.log(response);\r\n                let action = stopSubmit('provider', {_error: response.data.messages[0]});\r\n                dispatch(action);\r\n            }\r\n        })\r\n    }\r\n}\r\n\r\n\r\nexport default adminReducer;","// import React from 'react';\r\nimport {connect} from 'react-redux';\r\nimport MainCatalog from './MainCatalog';\r\nimport {getProductTypeList, crateNewProductType, reRenderComponent,\r\n     deleteProductType, loadProductTypeItemList} from '../../../../redux/adminReducer';\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        user: state.user,\r\n        admin: state.admin\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, \r\n    {getProductTypeList, crateNewProductType, reRenderComponent, \r\n        deleteProductType, loadProductTypeItemList}) \r\n    (MainCatalog);","import React, { useState } from 'react';\r\nimport {Pagination} from 'react-bootstrap';\r\n\r\n// let PaginationComponent = (totalItemsCount, pageSizs, currentPage, onPageCanged, portionSize) => {\r\nlet PaginationComponent = (props) => {\r\n    // console.log('totalItemsCount: '+props.totalItemsCount);\r\n    // console.log('currentPage: '+props.currentPage);\r\n    let pagesCount = Math.ceil(props.totalItemsCount / props.pageSizs); //Количество страниц возможных для вывода\r\n    // console.log('Количество страниц возможных для вывода:'+pagesCount)\r\n\r\n    let pages = [];\r\n    for (let i = 0; i <= pagesCount; i++) {\r\n        pages.push(i);\r\n    }\r\n\r\n    let portionCount = Math.ceil(pagesCount / props.portionSize);\r\n    let [portionNumber, setPortionNumber] = useState(1);\r\n    let leftPortionPageNumber = (portionNumber - 1) * props.portionSize + 1;\r\n    let rightPortionPageNumber = portionNumber * props.portionSize;\r\n    // console.log('rightPortionPageNumber:'+rightPortionPageNumber)\r\n\r\n    const changePage = (e) => {\r\n        props.onPageCanged(e.target.innerText)\r\n        // console.log(e.target.innerText);\r\n    }\r\n\r\n    \r\n    // console.log('portionCount:'+portionCount);\r\n    // console.log('portionNumber:'+portionNumber);\r\n    // console.log('portionSize (количество цифр пагинатроа):'+props.portionSize)\r\n    // console.log('leftPortionPageNumber:'+leftPortionPageNumber)\r\n    // console.log('rightPortionPageNumber:'+rightPortionPageNumber)\r\n\r\n    // console.log('render Pagination')\r\n\r\n    return (\r\n        <Pagination size=\"sm\">\r\n            {/* <Pagination.First/> */}\r\n            { portionNumber > 1 ? <Pagination.First onClick={()=>{ setPortionNumber(1);}}/> : <Pagination.First disabled/> }\r\n            { portionNumber > 1 ? <Pagination.Prev onClick={()=>{ setPortionNumber(portionNumber - 1);}}/> : <Pagination.Prev disabled/> }\r\n\r\n            {/* <Pagination.Prev /> */}\r\n            {/* <Pagination.Item>{1}</Pagination.Item>\r\n            <Pagination.Ellipsis /> */}\r\n\r\n            {/* <Pagination.Item>{10}</Pagination.Item>\r\n            <Pagination.Item>{11}</Pagination.Item>\r\n            <Pagination.Item active>{12}</Pagination.Item>\r\n            <Pagination.Item>{13}</Pagination.Item>\r\n            <Pagination.Item disabled>{14}</Pagination.Item> */}\r\n            {pages\r\n                .filter(p => p>= leftPortionPageNumber && p<= rightPortionPageNumber)\r\n                .map((p) => {\r\n                    if (p == props.currentPage) {\r\n                        return <Pagination.Item active>{p}</Pagination.Item>\r\n                    }\r\n                    return <Pagination.Item onClick={changePage} >{p}</Pagination.Item>\r\n                })\r\n            \r\n            }\r\n\r\n            {/* <Pagination.Ellipsis />\r\n            <Pagination.Item>{20}</Pagination.Item> */}\r\n            {/* <Pagination.Next /> */}\r\n            \r\n            { portionCount > portionNumber ? <Pagination.Next onClick={()=>{ setPortionNumber(portionNumber + 1);}}/> : <Pagination.Next disabled/> }\r\n            {/* <Pagination.Last /> */}\r\n            { portionCount !== portionNumber ? <Pagination.Last onClick={()=>{ setPortionNumber(portionCount);}}/> : <Pagination.Last disabled/> }\r\n        </Pagination>\r\n    );\r\n}\r\n\r\nexport default PaginationComponent;","import React from 'react';\r\nimport Table from 'react-bootstrap/Table';\r\nimport Pagination from './../../../universal/Pagination/Pagination';\r\n\r\nclass Process extends React.Component {\r\n    componentDidMount() {\r\n        if (!this.props.admin.contentList.includes(this.props.admin.handleSelect)) {\r\n            console.log('стартуем санку на перерисовку Process')\r\n            this.props.getProcessList(this.props.admin.processData.currentPage, this.props.admin.processData.pageSize);\r\n        } else {\r\n            console.log('ПЕРЕРИСОВКИ НЕТ')\r\n        }\r\n    }\r\n\r\n    render() {\r\n        console.log(this.props)\r\n\r\n        let processList = null;\r\n        // if (this.props.admin.content != null) {\r\n        processList = this.props.admin.process.map((item) => {\r\n            return (\r\n                <tr>\r\n                    <td>{item['id']}</td>\r\n                    <td>{item['name']}</td>\r\n                    <td>{item['status']}</td>\r\n                    <td>{item['start']}</td>\r\n                    <td></td>\r\n                </tr>\r\n            );\r\n        });\r\n        //} else {\r\n        //     processList = null;\r\n        // }\r\n\r\n        const changePageOnProcess = (num) => {\r\n            console.log('changePageOnProcess')\r\n            this.props.setCurrentProcessPage(num);\r\n            this.props.getProcessList(this.props.admin.processData.currentPage, this.props.admin.processData.pageSize);\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <Table striped bordered hover size=\"sm\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th>id</th>\r\n                            <th>Название</th>\r\n                            <th>Статус</th>\r\n                            <th>Дата создания</th>\r\n                            <th>Действия</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {processList}\r\n                    </tbody>\r\n                </Table>\r\n\r\n                <Pagination \r\n                    totalItemsCount={this.props.admin.processData.totalProcessCount}\r\n                    pageSizs = {this.props.admin.processData.pageSize}\r\n                    currentPage = {this.props.admin.processData.currentPage} \r\n                    onPageCanged={(num)=>{changePageOnProcess(num)}}\r\n                    portionSize='5'\r\n                />\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Process;","import {connect} from 'react-redux';\r\nimport Process from './Process';\r\nimport {getProcessList, tabIsLoaded, setCurrentProcessPage} from '../../../../redux/adminReducer';\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        admin: state.admin\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, \r\n    {getProcessList, tabIsLoaded, setCurrentProcessPage}) \r\n    (Process);","import React from 'react';\r\nimport { ListGroup, Accordion, Button, Table} from 'react-bootstrap';\r\n\r\nclass BaseFields extends React.Component {\r\n\r\n    render() {\r\n        let BaseFieldRows;\r\n        if (this.props.admin.settings.standartFieldsToProductType !== undefined) {\r\n            BaseFieldRows = this.props.admin.settings.standartFieldsToProductType.map((item) => {\r\n                console.log(item['data']);\r\n                return (\r\n                    <tr>\r\n                        <td>{item['data']}</td>\r\n                        <td>{item['value']}</td>\r\n                        <td></td>\r\n                    </tr>\r\n                );\r\n            });\r\n        } else {\r\n            BaseFieldRows = null;\r\n        }\r\n        if (BaseFieldRows) {\r\n            console.log(BaseFieldRows);\r\n        }\r\n\r\n        console.log(this.props.admin.settings.standartFieldsToProductType);\r\n        return (\r\n            <ListGroup.Item>\r\n                <Accordion>\r\n                    <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"BaseFields\">\r\n                        Базовые филды для ProductType\r\n                        </Accordion.Toggle>\r\n                    <Accordion.Collapse eventKey=\"BaseFields\">\r\n                        {/* <div>{BaseFieldRows}</div> */}\r\n\r\n                        <Table striped bordered hover size=\"sm\">\r\n                            <thead>\r\n                                <tr>\r\n                                    <th>Name</th>\r\n                                    <th>Value</th>\r\n                                    <th>Title</th>\r\n                                    <th>Descriptions</th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                {BaseFieldRows}\r\n                            </tbody>\r\n                        </Table>\r\n\r\n                    </Accordion.Collapse>\r\n                </Accordion>\r\n            </ListGroup.Item>\r\n        );\r\n    }\r\n}\r\n\r\nexport default BaseFields;","import React, { useState, useEffect } from 'react';\r\nimport { Accordion, Button, ListGroup, Table } from 'react-bootstrap';\r\nimport EditebleSpanContainer from '../../../../universal/EditebleSpan/EditebleSpanContainer';\r\n\r\nconst Constants = (props) => {\r\n    let [castomState, changeConstState] = useState(props.admin.constants);\r\n    let [data, changeData] = useState(false);\r\n    useEffect(() => {\r\n        changeData(!data);\r\n        console.log('useEffect');\r\n        if (props.admin.constants.length === 0) {\r\n            props.getConstantList();\r\n        }\r\n    }, [props.data, castomState]);\r\n\r\n    let saveValueInConstItem = (e) => {\r\n        let element = e.target.getAttribute('element');\r\n        let field = e.target.getAttribute('field');\r\n        let param = e.target.getAttribute('param');\r\n        console.log(element+', '+field+', [data], '+param);\r\n        let newCastomState = { ...props.admin.constants }\r\n        console.log(newCastomState);\r\n        newCastomState[element]['data'][field][param] = e.target.value;\r\n        changeConstState(newCastomState);\r\n    }\r\n\r\n    let changeValueInConstItem = (e) => {\r\n        console.log(e.target)\r\n    }\r\n\r\n    let constantRow = (constantItem, elementNumber) => {\r\n        let constantRowBlock = null;\r\n        if (constantItem) {\r\n            let i = 0;\r\n            constantRowBlock = constantItem.map((item) => {\r\n                return (\r\n                    <tr className=\"row mx-0\">\r\n                        <td className=\"col-3\" element={elementNumber} field={i++} param=\"data\"\r\n                        onDoubleClick={changeValueInConstItem}>\r\n                            {item['data']}\r\n                            {/* <EditebleSpanContainer \r\n                            value={item['data']} \r\n                            fieldName=\"title\"\r\n                            table = \"Product_types\"\r\n                            itemId = {item['id']}\r\n                            componentName = \"mainCatalog\"\r\n                            reRenderComponent = {this.props.reRenderComponent}\r\n                            /> */}\r\n                        </td>\r\n                        <td className=\"col-3\">{item['value']}</td>\r\n                        <td className=\"col-3\">{item['label'] ? <span>{item['label']}</span> : <span>null</span>}</td>\r\n                        <td className=\"col-3\">{item['descriptions'] ? <span>{item['descriptions']}</span> : <span>null</span>}</td>\r\n                    </tr>\r\n                );\r\n            });\r\n        }\r\n\r\n        // for (let item in constantItem) {\r\n        //     console.log(item['data']);\r\n        //     constantRowBlock.push(\r\n        //         <div>{item['data']}</div>\r\n        //     )\r\n        // }\r\n        return constantRowBlock;\r\n    }\r\n\r\n    let constantsBlock = null;\r\n    if (props.admin.constants) {\r\n        let i = 0;\r\n        constantsBlock = props.admin.constants.map((item) => {\r\n            return (\r\n                <ListGroup.Item className=\"py-1\">\r\n                    <Accordion>\r\n                        <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"1\">\r\n                            {item['label']}\r\n                        </Accordion.Toggle>\r\n                        <Accordion.Collapse eventKey=\"1\">\r\n                            <ListGroup.Item>\r\n                                Название константы: {item['name']}\r\n                                <Table striped bordered hover size=\"sm\" className=\"mb-0\">\r\n                                    <thead>\r\n                                        <tr className=\"row mx-0\">\r\n                                            <th className=\"col-3\">Имя</th>\r\n                                            <th className=\"col-3\">Вид данных</th>\r\n                                            <th className=\"col-3\">Наименование</th>\r\n                                            <th className=\"col-3\">Описание</th>\r\n                                        </tr>\r\n                                    </thead>\r\n                                    <tbody>\r\n                                        {constantRow(item['data'], i++)}\r\n                                    </tbody>\r\n                                </Table>\r\n                            </ListGroup.Item>\r\n                        </Accordion.Collapse>\r\n                    </Accordion>\r\n                </ListGroup.Item>\r\n            );\r\n        })\r\n    }\r\n\r\n    console.log(castomState);\r\n    return (\r\n        <div>{constantsBlock}</div>\r\n    );\r\n}\r\n\r\nexport default Constants;","import {connect} from 'react-redux';\r\nimport BaseFields from './BaseFields';\r\nimport {getSettingsList} from '../../../../../redux/adminReducer';\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        admin: state.admin\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, \r\n    {getSettingsList}) \r\n    (BaseFields);","import {connect} from 'react-redux';\r\nimport Constants from './Constants';\r\nimport {getConstantList} from '../../../../../redux/adminReducer';\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        admin: state.admin\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, \r\n    {getConstantList}) \r\n    (Constants);","import React from 'react';\r\nimport { ListGroup, Accordion, Button, Card } from 'react-bootstrap';\r\nimport BaseFieldsContainer from './BaseFields/BaseFieldsContainer';\r\nimport ConstantsContainer from './Constants/ConstantsContainer';\r\n\r\nclass Settings extends React.Component {\r\n    componentDidMount() {\r\n        if (!this.props.admin.contentList.includes(this.props.admin.handleSelect)) {\r\n            this.props.admin.contentList.push(this.props.admin.handleSelect);\r\n            this.props.getSettingsList();\r\n        }\r\n    }\r\n    \r\n\r\n    render() {\r\n        console.log(this.props);\r\n        \r\n        return (\r\n            <div>\r\n                <h2>SETTINGS</h2>\r\n\r\n                <ListGroup>\r\n\r\n                    <ListGroup.Item>\r\n                        <Accordion>\r\n                            <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"1\">\r\n                                Констанаты\r\n                            </Accordion.Toggle>\r\n                            <Accordion.Collapse eventKey=\"1\">\r\n                                {/* <Card.Body>Базовые филды</Card.Body> */}\r\n                                <ConstantsContainer />\r\n                            </Accordion.Collapse>\r\n                        </Accordion>\r\n                    </ListGroup.Item>\r\n\r\n                    <ListGroup.Item>Porta ac consectetur ac</ListGroup.Item>\r\n                    <ListGroup.Item>Vestibulum at eros</ListGroup.Item>\r\n                    <ListGroup.Item>\r\n                        <Accordion>\r\n                            <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"1\">\r\n                                Git\r\n                            </Accordion.Toggle>\r\n                            <Accordion.Collapse eventKey=\"1\">\r\n                                <Card.Body>\r\n                                    <b>Загрузка из Git: </b><br/>\r\n                                    git add . <br/>\r\n                                    git commit -am \"commit name\" <br/>\r\n                                    git push <br/>\r\n                                    <b>Если не авторизирован:</b><br/>\r\n                                </Card.Body>\r\n                            </Accordion.Collapse>\r\n                        </Accordion>\r\n                    </ListGroup.Item>\r\n                </ListGroup>\r\n            </div>\r\n\r\n        );\r\n    }\r\n}\r\n\r\n// const SettingsRow = (value, items) => {\r\n//     console.log(items);\r\n\r\n//     let processList;\r\n//         if (items !== undefined) {\r\n//             let itemsCopy = {...items};\r\n//             console.log(itemsCopy);\r\n//             processList = itemsCopy.map( (item) => {\r\n//                 console.log(item);\r\n//                 return (\r\n//                     <Card.Body>{item['data']}</Card.Body>\r\n//                 );\r\n//             });\r\n//         } else {\r\n//             processList = null;\r\n//         }\r\n//         // processList = null;\r\n\r\n//         // debugger;\r\n//     return (\r\n//         <ListGroup.Item>\r\n//             <Accordion>\r\n//                 <Card>\r\n//                     <Card.Header>\r\n//                         <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"1\">\r\n//                             {value}\r\n//                     </Accordion.Toggle>\r\n//                     </Card.Header>\r\n//                     <Accordion.Collapse eventKey=\"1\">\r\n//                         {items!==undefined ? processList : \r\n//                         <Card.Body>null</Card.Body>\r\n//                         }\r\n//                     </Accordion.Collapse>\r\n//                 </Card>\r\n//             </Accordion>\r\n//         </ListGroup.Item>\r\n//     );\r\n// }\r\n\r\n\r\nexport default Settings;","import {connect} from 'react-redux';\r\nimport Settings from './Settings';\r\nimport {getSettingsList} from '../../../../redux/adminReducer';\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        admin: state.admin\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, \r\n    {getSettingsList}) \r\n    (Settings);","import React, { Component } from 'react';\r\nimport { FormGroup, FormControl, Col, Row, Form, InputGroup, Button } from 'react-bootstrap';\r\nimport { Field, reduxForm } from 'redux-form';\r\n// import ControlLabel from 'react-bootstrap/ControlLabel';\r\n\r\nexport class InputAsRow extends Component {\r\n\r\n    render() {\r\n\r\n        const { placeholder, type, input, meta, required } = this.props;\r\n\r\n        let hasError = false;\r\n        if (this.props.meta) {\r\n            hasError = this.props.meta.error && this.props.meta.touched;\r\n        }\r\n\r\n        const isRequired = () => {\r\n            if (required) {\r\n                return (\r\n                    <FormControl required\r\n                        type={type}\r\n                        placeholder={placeholder}\r\n                        value={input.value}\r\n                        onChange={input.onChange}\r\n                        isInvalid={hasError} />\r\n                );\r\n            } else {\r\n                return (\r\n                    <FormControl\r\n                        type={type}\r\n                        placeholder={placeholder}\r\n                        value={input.value}\r\n                        onChange={input.onChange} />\r\n                );\r\n            }\r\n        }\r\n\r\n        return (\r\n            <FormGroup className=\"mb-1\" controlId={input.name} as={Row} validationState={meta.error ? 'error' : 'success'}>\r\n                <Form.Label column sm={3}>\r\n                    {this.props.children}\r\n                </Form.Label>\r\n                <Col sm={9}>\r\n                    {isRequired()}\r\n                    <Form.Control.Feedback type=\"invalid\">\r\n                        {this.props.meta.error}\r\n                    </Form.Control.Feedback>\r\n                </Col>\r\n            </FormGroup>\r\n        );\r\n    }\r\n}\r\n\r\nexport class InputAsRowAppendBtn extends Component {\r\n\r\n    render() {\r\n\r\n        const { placeholder, type, input, meta, required, Append } = this.props;\r\n\r\n        let hasError = false;\r\n        if (this.props.meta) {\r\n            hasError = this.props.meta.error && this.props.meta.touched;\r\n        }\r\n\r\n        const isRequired = () => {\r\n            if (required) {\r\n                return (\r\n                    <FormControl required\r\n                        type={type}\r\n                        placeholder={placeholder}\r\n                        value={input.value}\r\n                        onChange={input.onChange}\r\n                        isInvalid={hasError} />\r\n                );\r\n            } else {\r\n                return (\r\n                    <FormControl\r\n                        type={type}\r\n                        placeholder={placeholder}\r\n                        value={input.value}\r\n                        onChange={input.onChange} />\r\n                );\r\n            }\r\n        }\r\n\r\n        return (\r\n            <FormGroup className=\"mb-1\" controlId={input.name} as={Row} validationState={meta.error ? 'error' : 'success'}>\r\n                <Form.Label column sm={3}>\r\n                    {this.props.children}\r\n                </Form.Label>\r\n                <Col sm={9}>\r\n                <InputGroup className=\"mb-0\">\r\n                    {isRequired()} \r\n                    <InputGroup.Append>\r\n                        <Button variant=\"outline-secondary\">{Append}</Button>\r\n                    </InputGroup.Append>\r\n                    <Form.Control.Feedback type=\"invalid\">\r\n                        {this.props.meta.error}\r\n                    </Form.Control.Feedback>\r\n                </InputGroup>\r\n                </Col>\r\n            </FormGroup>\r\n        );\r\n    }\r\n}\r\n\r\nexport class FieldFormCheckbox extends Component {\r\n\r\n    render() {\r\n        const { placeholder, type, input, meta, required } = this.props;\r\n        return (\r\n            <Form.Group className=\"mb-1\" controlId={input.name}>\r\n                <Form.Label column sm={3}>\r\n                    {this.props.children}\r\n                </Form.Label>\r\n                <Col sm={9}>\r\n                    <FormControl\r\n                        // as=\"checkbox\"\r\n                        type={type}\r\n                        placeholder={placeholder}\r\n                        // value={input.value} \r\n                        onChange={input.onChange} />\r\n                </Col>\r\n            </Form.Group>\r\n\r\n        );\r\n    }\r\n}\r\n\r\nexport class SelectAsRow extends Component {\r\n\r\n    render() {\r\n        const { placeholder, type, input, meta, required, options, onChange } = this.props;\r\n        // console.log(meta.error);\r\n        let hasError = false;\r\n        if (this.props.meta) {\r\n            hasError = this.props.meta.error && this.props.meta.touched;\r\n        }\r\n\r\n        const optionsBlock = [];\r\n        if (options) {\r\n            for (let prop in options) {\r\n                optionsBlock.push(\r\n                    <option>{options[prop]}</option>\r\n                );\r\n            }\r\n        }\r\n\r\n        const onChangeCall = (e) => {\r\n            if (this.props.onChangeSet) {\r\n                this.props.onChangeSet(e);\r\n            }\r\n        }\r\n\r\n        // console.log(this.props.meta.error)\r\n        return (\r\n            <Form.Group className=\"mb-1\" controlId={input.name} as={Row} >\r\n                <Form.Label column sm={3}>\r\n                    {this.props.children}\r\n                </Form.Label>\r\n                <Col sm={9}>\r\n                    {/* <FormControl as=\"select\" custom onChange={onChangeCall}> */}\r\n                    <Field name={input.name} className={this.props.meta.error ? 'custom-select is-invalid' : 'custom-select'} component=\"select\"\r\n                        onChange={onChangeCall} >\r\n                        <option>{placeholder}</option>\r\n                        {optionsBlock}\r\n                    </Field>\r\n                    {/* </FormControl> */}\r\n                    <Form.Control.Feedback type=\"invalid\">\r\n                        {this.props.meta.error}\r\n                    </Form.Control.Feedback>\r\n                </Col>\r\n            </Form.Group>\r\n        );\r\n    }\r\n}","import React, {useState} from 'react';\r\nimport { SelectAsRow, InputAsRow, InputAsRowAppendBtn } from './../../../../../../../utils/components/components';\r\nimport { isEmail } from './../../../../../../../utils/validators/validators';\r\nimport { Field, reduxForm } from 'redux-form';\r\nimport { ListGroup, Alert } from 'react-bootstrap';\r\n\r\nconst LoadTypeForm = (props) => {\r\n    const [loadType, choisLoadTypeToState] = useState(null);\r\n\r\n    const onFieldEdit = (e) => {\r\n        console.log(e.target.value)\r\n    }\r\n\r\n    const getEmailList = () => {\r\n        console.log('getEmailList');\r\n    }\r\n\r\n    let loadTypeBlock = null;\r\n\r\n    switch (loadType) {\r\n        case 'Email':\r\n            loadTypeBlock = (\r\n                <div>\r\n                    <Field component= {InputAsRowAppendBtn}\r\n                    name=\"emailName\"\r\n                    type=\"text\"\r\n                    required\r\n                    validate={[isEmail]}\r\n                    Append = \"Список\"\r\n                    AppendSet={getEmailList}\r\n                    placeholder=\"Введите Email\" >Email</Field>\r\n    \r\n                <Field component= {InputAsRowAppendBtn}\r\n                    name=\"fileNameKey\"\r\n                    type=\"text\"\r\n                    // required\r\n                    validate={[]}\r\n                    Append = \"Варианты\"\r\n                    AppendSet={getEmailList}\r\n                    placeholder=\"Введите Email\" >Ключ названия прайса</Field>\r\n    \r\n                </div>\r\n            );\r\n            break;\r\n\r\n        case 'Parser':\r\n            loadTypeBlock = (\r\n                <div>\r\n                    <Field component= {InputAsRowAppendBtn}\r\n                    name=\"ParserName\"\r\n                    type=\"text\"\r\n                    required\r\n                    validate={[]}\r\n                    Append = \"Список\"\r\n                    AppendSet={getEmailList}\r\n                    placeholder=\"Введите название парсера\" >Parser</Field>\r\n                </div>);\r\n            break;\r\n\r\n        case 'FTP':\r\n            loadTypeBlock = (\r\n                <div>\r\n                    <Field component= {InputAsRow}\r\n                    name=\"ftpURL\"\r\n                    type=\"text\"\r\n                    required\r\n                    validate={[]}\r\n                    placeholder=\"Укажите ссылку на FTP\" >FTP URL</Field>\r\n                </div>);\r\n            break;\r\n\r\n        case 'Google':\r\n            loadTypeBlock = (\r\n                <div>\r\n                    <Field component= {InputAsRow}\r\n                    name=\"GoogleURL\"\r\n                    type=\"text\"\r\n                    required\r\n                    validate={[]}\r\n                    placeholder=\"Укажите ссылку на Google\" >Google URL</Field>\r\n                </div>);\r\n            break;\r\n\r\n        case 'Skype':\r\n            loadTypeBlock = (\r\n                <Alert key=\"1\" variant=\"warning\">\r\n                    В процессе разработки\r\n                </Alert>\r\n            );\r\n            break;\r\n\r\n        case 'Telegram':\r\n            loadTypeBlock = (\r\n                <Alert key=\"1\" variant=\"warning\">\r\n                    В процессе разработки\r\n                </Alert>\r\n            );\r\n            break;\r\n\r\n        case 'В ручную':\r\n            loadTypeBlock = (\r\n                <Alert key=\"1\" variant=\"warning\">\r\n                    В процессе разработки\r\n                </Alert>\r\n            );\r\n            break;\r\n    \r\n        default:\r\n            loadTypeBlock = null;\r\n            break;\r\n    }\r\n\r\n    const choisLoadType = (e) => {\r\n        choisLoadTypeToState(e.target.value)\r\n    }\r\n\r\n    const choiseLoadPeriod = (e) => {\r\n        console.log(e.target.value);\r\n    }\r\n\r\n    return (\r\n        <ListGroup>\r\n            <ListGroup.Item>\r\n                <Field component={SelectAsRow}\r\n                    name=\"loadType\"\r\n                    type=\"select\"\r\n                    placeholder=\"Выберите способ загрузки прайса\"\r\n                    options={['Email', 'Parser', 'FTP', 'Google', 'Skype', 'Telegram', 'В ручную']}\r\n                    required\r\n                    validate={[]}\r\n                    onChangeSet={choisLoadType}\r\n                >Способ загрузки</Field>\r\n\r\n                {loadTypeBlock}\r\n\r\n                <Field component={SelectAsRow}\r\n                    name=\"loadPeriod\"\r\n                    type=\"select\"\r\n                    placeholder=\"Введите переодичность загрузки прайса\"\r\n                    options={['1 раз в день', '1 раз в неделю', '1 раз в месяц', 'реже 1 раза в месяц']}\r\n                    required\r\n                    validate={[]}\r\n                    onChangeSet={choiseLoadPeriod}\r\n                >Частота загрузки</Field>\r\n\r\n            </ListGroup.Item>\r\n        </ListGroup>\r\n    );\r\n}\r\n\r\nexport default LoadTypeForm;","import React, { useState } from 'react';\r\nimport {ListGroup, Dropdown, Button, ButtonGroup, DropdownButton, Form, Row, Col} from 'react-bootstrap';\r\nimport { Field, reduxForm } from 'redux-form';\r\nimport { SelectAsRow, InputAsRow, InputAsRowAppendBtn } from './../../../../../../../utils/components/components';\r\nimport { requiredField, latinOnly, phoneNumberValidator } from './../../../../../../../utils/validators/validators';\r\n\r\nconst ContactForm = (props) => {\r\n    const [contactType, addContactTypeTo] = useState([]);\r\n\r\n    const addContactType = (e) => {\r\n        addContactTypeTo(contactType => [...contactType, e]);\r\n    }\r\n    const deleteLastContactType = () => {\r\n        contactType.pop();\r\n        addContactTypeTo(contactType => [...contactType]);\r\n        // разобраться почему не удаляется из формы\r\n    }\r\n    \r\n    let p = 0;\r\n    let s = 0;\r\n    let v = 0;\r\n    let t = 0;\r\n    let contactTypeBlock = contactType.map((item) => {\r\n        switch (item) {\r\n            case 'Телефон':\r\n                p++;\r\n                return (\r\n                    <ListGroup.Item className=\"my-2\">\r\n                        <Field component= {InputAsRow}\r\n                            name={'phoneCotact_' + p}\r\n                            type=\"number\"\r\n                            required\r\n                            validate={[requiredField, phoneNumberValidator]}\r\n                            placeholder=\"Введите номер телефона\" >Номер телефона {p}</Field>\r\n\r\n                        <Field component= {InputAsRow}\r\n                            name={'managerName_' + p}\r\n                            type=\"text\"\r\n                            required\r\n                            validate={[requiredField]}\r\n                            placeholder=\"Введите имя менеджера\" >Имя менеджера {p}</Field>\r\n                    </ListGroup.Item>\r\n                );\r\n\r\n            case 'Skype':\r\n                s++;\r\n                return (\r\n                    <ListGroup.Item className=\"my-2\">\r\n                        <Field component= {InputAsRow}\r\n                            name={'skypeContact_' + s}\r\n                            type=\"text\"\r\n                            required\r\n                            validate={[requiredField, latinOnly]}\r\n                            placeholder=\"Введите логин скайп\" >Логин скайп {s}</Field>\r\n                    </ListGroup.Item>\r\n                );\r\n\r\n            case 'Viber':\r\n                v++;\r\n                return (\r\n                    <ListGroup.Item className=\"my-2\">\r\n                        <Field component= {InputAsRow}\r\n                            name={'viberContact_' + v}\r\n                            type=\"number\"\r\n                            required\r\n                            validate={[requiredField, phoneNumberValidator]}\r\n                            placeholder=\"Введите номер Viber\" >Номер Viber {v}</Field>\r\n                    </ListGroup.Item>\r\n                );\r\n\r\n            case 'Telegram':\r\n                t++;\r\n                return (\r\n                    <ListGroup.Item className=\"my-2\">\r\n                        <Field component= {InputAsRow}\r\n                            name={'telegramContact_' + t}\r\n                            type=\"number\"\r\n                            required\r\n                            validate={[requiredField, phoneNumberValidator]}\r\n                            placeholder=\"Введите номер Telegram\" >Номер Telegram {t}</Field>\r\n                    </ListGroup.Item>\r\n                );\r\n\r\n            default:\r\n                break;\r\n        }\r\n\r\n    })\r\n\r\n    p = 0;\r\n    s = 0;\r\n    v = 0;\r\n    t = 0;\r\n    let primaryContactOptions = contactType.map((item) => {\r\n\r\n        switch (item) {\r\n            case 'Телефон':\r\n                p++\r\n                return item+ ' ' + p;\r\n            case 'Skype':\r\n                s++\r\n                return item+ ' ' + s;\r\n            case 'Viber':\r\n                v++\r\n                return item+ ' ' + v;\r\n            case 'Telegram':\r\n                t++\r\n                return item+ ' ' + t;\r\n            default:\r\n                break;\r\n        }\r\n    })\r\n\r\n    return (\r\n        <ListGroup>\r\n            <ListGroup.Item>\r\n\r\n                {contactTypeBlock}\r\n\r\n                <ButtonGroup size=\"sm\" className=\"my-3\">\r\n                        <DropdownButton size=\"sm\" as={ButtonGroup} title=\"Добавить способ связи\"\r\n                            onSelect={addContactType} id=\"bg-nested-dropdown\">\r\n                            <Dropdown.Item size=\"sm\" eventKey=\"Телефон\">Телефон</Dropdown.Item>\r\n                            <Dropdown.Item size=\"sm\" eventKey=\"Skype\">Skype</Dropdown.Item>\r\n                            <Dropdown.Item size=\"sm\" eventKey=\"Viber\">Viber</Dropdown.Item>\r\n                            <Dropdown.Item size=\"sm\" eventKey=\"Telegram\">Telegram</Dropdown.Item>\r\n                        </DropdownButton>\r\n                        <Button size=\"sm\" variant=\"danger\" onClick={deleteLastContactType}>\r\n                            Удалить\r\n                    </Button>\r\n                </ButtonGroup>\r\n\r\n                <Field component={SelectAsRow}\r\n                    name=\"primoryContact\"\r\n                    type=\"select\"\r\n                    placeholder=\"Выберите приоритетный контакт\"\r\n                    options={primaryContactOptions}\r\n                >Предпочтительный:</Field>\r\n\r\n            </ListGroup.Item>\r\n        </ListGroup>\r\n    );\r\n}\r\n\r\nexport default ContactForm;","import React, { useState } from 'react';\r\nimport { ListGroup, Dropdown, Button, ButtonGroup, DropdownButton, Form, Row, Col, Table } from 'react-bootstrap';\r\nimport { Field, reduxForm } from 'redux-form';\r\nimport { SelectAsRow, InputAsRow, InputAsRowAppendBtn, FieldFormCheckbox } from './../../../../../../../utils/components/components';\r\nimport { requiredField, latinOnly, phoneNumberValidator } from './../../../../../../../utils/validators/validators';\r\n\r\nconst AdressForm = (props) => {\r\n    const [workTime, setWorkTimeTo] = useState({});\r\n    const [warehouseAnotherPlase, setWarehouseAnotherPlaseTo] = useState(false);\r\n    const [warehouseAnotherTime, setWarehouseAnotherTimeTo] = useState(false);\r\n\r\n    const setWarehouseAnotherPlase = () => {\r\n        setWarehouseAnotherPlaseTo(!warehouseAnotherPlase)\r\n    }\r\n\r\n    const setWarehouseAnotherTime = () => {\r\n        setWarehouseAnotherTimeTo(!warehouseAnotherTime)\r\n    }\r\n\r\n    const setWorkTime = (e) => {\r\n        let newWorkTime = { ...workTime };\r\n        if (!newWorkTime[e.target.id]) {\r\n            newWorkTime[e.target.id] = (\r\n                <Form.Row>\r\n                    <Col sm={6}>\r\n                        <Field component={InputAsRow}\r\n                            name={e.target.id + 'Start'}\r\n                            type=\"time\"\r\n                            required\r\n                            validate={[requiredField]}\r\n                            placeholder=\"\" >c</Field>\r\n                    </Col>\r\n                    <Col sm={6}>\r\n                        <Field component={InputAsRow}\r\n                            name={e.target.id + 'Finish'}\r\n                            type=\"time\"\r\n                            required\r\n                            validate={[requiredField]}\r\n                            placeholder=\"\" >до</Field>\r\n                    </Col>\r\n                </Form.Row>\r\n            );\r\n        } else {\r\n            newWorkTime[e.target.id] = false;\r\n        }\r\n        setWorkTimeTo(workTime => newWorkTime)\r\n    }\r\n\r\n    const dayItem = (day, target, title) => {\r\n        return (\r\n            <tr>\r\n                <td className=\"py-1\">\r\n                    <div className=\"form-check\">\r\n                        <Field component=\"input\"\r\n                            id={day + '_' + target + '_work'}\r\n                            className=\"form-check-input\"\r\n                            name={day + '_' + target + '_work'}\r\n                            type=\"checkbox\"\r\n                            onClick={setWorkTime} />\r\n                        <label for={day + '_' + target + '_work'} className=\"mb-0\">\r\n                            {title}\r\n                        </label>\r\n                    </div>\r\n                </td>\r\n                <td className=\"py-1\">{workTime[day + '_' + target + '_work']}</td>\r\n            </tr>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <ListGroup>\r\n            <ListGroup.Item>\r\n\r\n                <p className=\"text-center mb-1\">Адрес офиса</p>\r\n\r\n                <Field component={InputAsRow}\r\n                    name=\"oficeSity\"\r\n                    type=\"text\"\r\n                    required\r\n                    validate={[requiredField]}\r\n                    placeholder=\"Город\" >Город</Field>\r\n                <Field component={InputAsRow}\r\n                    name=\"oficeStreet\"\r\n                    type=\"text\"\r\n                    required\r\n                    validate={[requiredField]}\r\n                    placeholder=\"Улица\" >Улица</Field>\r\n                <Field component={InputAsRow}\r\n                    name=\"oficeHouse\"\r\n                    type=\"text\"\r\n                    required\r\n                    validate={[requiredField]}\r\n                    placeholder=\"Дом\" >Дом</Field>\r\n                <Field component={InputAsRow}\r\n                    name=\"oficeRoom\"\r\n                    type=\"text\"\r\n                    placeholder=\"Помещение\" >Помещение</Field>\r\n\r\n                <p className=\"text-center mb-1\">График работы офиса</p>\r\n\r\n                <Table striped hover>\r\n                    <tbody>\r\n                        {dayItem('monday', 'ofice', 'Понедельник')}\r\n                        {dayItem('tuesday', 'ofice', 'Вторник')}\r\n                        {dayItem('wednesday', 'ofice', 'Среда')}\r\n                        {dayItem('thursday', 'ofice', 'Четверг')}\r\n                        {dayItem('friday', 'ofice', 'Пятница')}\r\n                        {dayItem('saturday', 'ofice', 'Суббота')}\r\n                        {dayItem('sunday', 'ofice', 'Воскресенье')}\r\n\r\n                    </tbody>\r\n                </Table>\r\n\r\n                <Form.Row>\r\n                    <Col sm={6}>\r\n                        <div className=\"form-check\">\r\n                            <Field component=\"input\"\r\n                                id=\"anotherWarehouseAdress\"\r\n                                className=\"form-check-input\"\r\n                                name=\"anotherWarehouseAdress\"\r\n                                type=\"checkbox\"\r\n                                onClick={setWarehouseAnotherPlase}\r\n                            />\r\n                            <label for=\"anotherWarehouseAdress\">Склад в другом месте</label>\r\n                        </div>\r\n                    </Col>\r\n                    <Col sm={6}>\r\n                        <div className=\"form-check\">\r\n                            <Field component=\"input\"\r\n                                id=\"anotherWarehouseTime\"\r\n                                className=\"form-check-input\"\r\n                                name=\"anotherWarehouseTime\"\r\n                                type=\"checkbox\"\r\n                                onClick={setWarehouseAnotherTime}\r\n                            />\r\n                            <label for=\"anotherWarehouseTime\">Склад работает по другому графику</label>\r\n                        </div>\r\n                    </Col>\r\n                </Form.Row>\r\n\r\n                {warehouseAnotherPlase ?\r\n                    <div>\r\n                        <p className=\"text-center mb-1\">Адрес Склада</p>\r\n\r\n                        <Field component={InputAsRow}\r\n                            name=\"warehouseSity\"\r\n                            type=\"text\"\r\n                            required\r\n                            validate={[requiredField]}\r\n                            placeholder=\"Город\" >Город</Field>\r\n                        <Field component={InputAsRow}\r\n                            name=\"warehouseStreet\"\r\n                            type=\"text\"\r\n                            required\r\n                            validate={[requiredField]}\r\n                            placeholder=\"Улица\" >Улица</Field>\r\n                        <Field component={InputAsRow}\r\n                            name=\"warehouseHouse\"\r\n                            type=\"text\"\r\n                            required\r\n                            validate={[requiredField]}\r\n                            placeholder=\"Дом\" >Дом</Field>\r\n                        <Field component={InputAsRow}\r\n                            name=\"warehouseRoom\"\r\n                            type=\"text\"\r\n                            placeholder=\"Помещение\" >Помещение</Field>\r\n                    </div>\r\n                    : null\r\n                }\r\n\r\n\r\n                {warehouseAnotherTime ?\r\n                    <div>\r\n                        <p className=\"text-center mb-1\">График работы склада</p>\r\n                        <Table striped hover>\r\n                            <tbody>\r\n                                {dayItem('monday', 'warehouse', 'Понедельник')}\r\n                                {dayItem('tuesday', 'warehouse', 'Вторник')}\r\n                                {dayItem('wednesday', 'warehouse', 'Среда')}\r\n                                {dayItem('thursday', 'warehouse', 'Четверг')}\r\n                                {dayItem('friday', 'warehouse', 'Пятница')}\r\n                                {dayItem('saturday', 'warehouse', 'Суббота')}\r\n                                {dayItem('sunday', 'warehouse', 'Воскресенье')}\r\n                            </tbody>\r\n                        </Table>\r\n                    </div>\r\n                    : null\r\n                }\r\n\r\n\r\n\r\n            </ListGroup.Item>\r\n        </ListGroup>\r\n    );\r\n}\r\n\r\nexport default AdressForm;","import React, { useState } from 'react';\r\nimport { ListGroup, Dropdown, Button, ButtonGroup, DropdownButton, Alert, Form, Row, Col, Table } from 'react-bootstrap';\r\nimport { Field, reduxForm } from 'redux-form';\r\nimport { SelectAsRow, InputAsRow, InputAsRowAppendBtn, FieldFormCheckbox } from './../../../../../../../utils/components/components';\r\nimport { requiredField, latinOnly, phoneNumberValidator, currentLnghtCreator } from './../../../../../../../utils/validators/validators';\r\n\r\nconst PayForm = (props) => {\r\n    const [payCash, setPayCashTo] = useState(false);\r\n    const setPayCash = () => {\r\n        setPayCashTo(!payCash);\r\n    }\r\n\r\n    const [payBank, setPayBankTo] = useState(false);\r\n    const setPayBank = () => {\r\n        setPayBankTo(!payBank);\r\n    }\r\n\r\n    const [possibilityDeferredPayment, setpossibilityDeferredPaymentTo] = useState(false);\r\n    const setpossibilityDeferredPayment = () => {\r\n        setpossibilityDeferredPaymentTo(!possibilityDeferredPayment);\r\n    }\r\n\r\n    const currentLnght29 = currentLnghtCreator(29);\r\n    const currentLnght8 = currentLnghtCreator(8);\r\n    const currentLnght9 = currentLnghtCreator(9);\r\n\r\n    const getBankList = () => {\r\n        console.log('getBankList');\r\n    }\r\n\r\n    return (\r\n        <ListGroup>\r\n            <ListGroup.Item>\r\n                <p className=\"text-center mb-1\">Способ оплаты:</p>\r\n                <Form.Row>\r\n                    <Col sm={6}>\r\n                        <div className=\"form-check\">\r\n                            <Field component=\"input\"\r\n                                id=\"payCash\"\r\n                                className=\"form-check-input\"\r\n                                name=\"payCash\"\r\n                                type=\"checkbox\"\r\n                                onClick={setPayCash}\r\n                            />\r\n                            <label for=\"payCash\">Наличные</label>\r\n                        </div>\r\n                    </Col>\r\n                    <Col sm={6}>\r\n                        <div className=\"form-check\">\r\n                            <Field component=\"input\"\r\n                                id=\"payBank\"\r\n                                className=\"form-check-input\"\r\n                                name=\"payBank\"\r\n                                type=\"checkbox\"\r\n                                onClick={setPayBank}\r\n                            />\r\n                            <label for=\"payBank\">Безнал</label>\r\n                        </div>\r\n                    </Col>\r\n                </Form.Row>\r\n                {payCash ?\r\n                    <ListGroup.Item>\r\n                        <p className=\"text-center mb-1\">Способ оплаты наличными:</p>\r\n                        <Form.Row>\r\n                            <Col sm={6}>\r\n                                <div className=\"form-check\">\r\n                                    <Field component=\"input\"\r\n                                        id=\"payBYR\"\r\n                                        className=\"form-check-input\"\r\n                                        name=\"payBYN\"\r\n                                        type=\"checkbox\"\r\n                                    // onClick={setPayCash}\r\n                                    />\r\n                                    <label for=\"payBYR\">BYR</label>\r\n                                </div>\r\n                            </Col>\r\n                            <Col sm={6}>\r\n                                <div className=\"form-check\">\r\n                                    <Field component=\"input\"\r\n                                        id=\"payUSD\"\r\n                                        className=\"form-check-input\"\r\n                                        name=\"payUSD\"\r\n                                        type=\"checkbox\"\r\n                                    // onClick={setWarehouseAnotherPlase}\r\n                                    />\r\n                                    <label for=\"payUSD\">USD</label>\r\n                                </div>\r\n                            </Col>\r\n                        </Form.Row>\r\n                    </ListGroup.Item>\r\n                    : null\r\n                }\r\n                {payBank ?\r\n                    <ListGroup.Item>\r\n                        <p className=\"text-center mb-1\">Информация для безналичного рассчета:</p>\r\n\r\n                        <Field component={InputAsRow}\r\n                            name=\"nameToBank\"\r\n                            type=\"text\"\r\n                            required\r\n                            validate={[requiredField]}\r\n                            placeholder='ООО \"Название фирмы\"' >Юр. лиццо</Field>\r\n                        <Field component={InputAsRow}\r\n                            name=\"payAccount\"\r\n                            type=\"text\"\r\n                            required\r\n                            validate={[requiredField, currentLnght29]}\r\n                            placeholder='Введите рассчетный счет' >р/счет:</Field>\r\n                        <Field component={InputAsRowAppendBtn}\r\n                            name=\"bankCode\"\r\n                            type=\"text\"\r\n                            required\r\n                            validate={[requiredField, currentLnght8]}\r\n                            Append=\"Получить\"\r\n                            AppendSet={getBankList}\r\n                            placeholder='Введите код банка' >Код банка:</Field>\r\n                        <Field component={InputAsRow}\r\n                            name=\"unp\"\r\n                            type=\"number\"\r\n                            required\r\n                            validate={[requiredField, currentLnght9]}\r\n                            placeholder='Введите УНП' >УНП:</Field>\r\n                        <Field component={InputAsRow}\r\n                            name=\"contractNumber\"\r\n                            type=\"text\"\r\n                            required\r\n                            validate={[requiredField]}\r\n                            placeholder='Введите номер договора' >Номер договора</Field>\r\n                        <Field component={InputAsRow}\r\n                            name=\"contractDate\"\r\n                            type=\"date\"\r\n                            required\r\n                            validate={[requiredField]}\r\n                        >Дата договора</Field>\r\n                        <Field component={InputAsRow}\r\n                            name=\"adressToBank\"\r\n                            type=\"text\"\r\n                            required\r\n                            validate={[requiredField]}\r\n                            placeholder='Введите юридический адрес фирмы' >Юр. адрес</Field>\r\n\r\n                        <div className=\"form-check\">\r\n                            <Field component=\"input\"\r\n                                id=\"payWithTAX\"\r\n                                className=\"form-check-input\"\r\n                                name=\"payWithTAX\"\r\n                                type=\"checkbox\"\r\n                            />\r\n                            <label for=\"payWithTAX\">Оплата с НДС</label>\r\n                        </div>\r\n\r\n                    </ListGroup.Item>\r\n                    : null\r\n                }\r\n\r\n                <div className=\"form-check\">\r\n                    <Field component=\"input\"\r\n                        id=\"possibilityDeferredPayment\"\r\n                        className=\"form-check-input\"\r\n                        name=\"possibilityDeferredPayment\"\r\n                        type=\"checkbox\"\r\n                        onClick={setpossibilityDeferredPayment} />\r\n                    <label for=\"possibilityDeferredPayment\">Возможность отсрочки платежа</label>\r\n                </div>\r\n                {possibilityDeferredPayment ?\r\n                    <Field component={InputAsRow}\r\n                        name=\"paymentCount\"\r\n                        type=\"number\"\r\n                        required\r\n                        validate={[requiredField]} >Дней отсрочки</Field>\r\n                    : null}\r\n\r\n                <Field component={InputAsRow}\r\n                    name=\"reserveCount\"\r\n                    type=\"number\"\r\n                    required\r\n                    validate={[]} >Дней резерва</Field>\r\n\r\n                <Alert variant=\"danger\">\r\n                    Порядок забора товара (ДОПИЛИТЬ!!!)\r\n                </Alert>\r\n\r\n            </ListGroup.Item>\r\n        </ListGroup>\r\n    );\r\n}\r\n\r\nexport default PayForm;","import React, { useState } from 'react';\r\nimport { Field, reduxForm } from 'redux-form';\r\nimport { requiredField, maxLengthCreator, latinOnly, mustBrSelected } from './../../../../../../utils/validators/validators';\r\nimport { Form, Button, Row, Col, Alert } from 'react-bootstrap';\r\nimport {InputAsRow} from './../../../../../../utils/components/components';\r\nimport LoadTypeForm from './forms/LoadTypeForm';\r\nimport ContactForm from './forms/ContactForm';\r\nimport AdressForm from './forms/AdressForm';\r\nimport PayForm from './forms/PayForm';\r\n\r\n\r\nconst ProviderForm = (props) => {\r\n    // console.log(props)\r\n    // const maxLength10 = maxLengthCreator(13);\r\n    const [validated, setValidated] = useState(false);\r\n    // const [setValidated] = useState(false);\r\n    // const [validated] = useState(true); // запускает проверку сразу\r\n\r\n\r\n\r\n    const handleSubmit = (event) => {\r\n        // console.log(props)\r\n        const form = event.currentTarget;\r\n        if (form.checkValidity() === false) {\r\n            event.preventDefault();\r\n            event.stopPropagation();\r\n        }\r\n\r\n        setValidated(true);\r\n    };\r\n\r\n    console.log(props.error);\r\n\r\n    return (\r\n        <Form id=\"createNewProvider\" noValidate validated={validated} onSubmit={props.handleSubmit}>\r\n            <Field component= {InputAsRow}\r\n                name=\"title\"\r\n                type=\"text\"\r\n                required\r\n                validate={[requiredField]}\r\n                placeholder=\"Наименование\" >Наименование</Field>\r\n\r\n            <Field component={InputAsRow}\r\n                name=\"name\"\r\n                type=\"text\"\r\n                required\r\n                validate={[requiredField,latinOnly]} \r\n                placeholder=\"Наименование в ДБ латинскими буквами\">Наименование в БД</Field>\r\n\r\n            <LoadTypeForm />\r\n            <ContactForm />\r\n            <AdressForm />\r\n            <PayForm />\r\n\r\n            { props.error ? \r\n                <Alert key=\"1\" variant=\"danger\">\r\n                    {props.error}\r\n                </Alert> : null }\r\n\r\n            {/* <Button type=\"submit\">Войти</Button> */}\r\n        </Form>\r\n    );\r\n}\r\n\r\nconst ProviderReduxForm = reduxForm({\r\n    form: 'provider'\r\n})(ProviderForm);\r\n\r\nexport default ProviderReduxForm;","import React, { useState } from 'react';\r\nimport ProviderForm from './ProviderForm/ProviderForm'\r\nimport { Modal, Button } from 'react-bootstrap';\r\n\r\nconst ProviderCreate = (props) => {\r\n    const [show, setShow] = useState(false);\r\n    const handleClose = () => {\r\n        setShow(false);\r\n    }\r\n    const handleShow = () => setShow(true);\r\n\r\n    const onSubmit = (formData) => {\r\n        console.log(formData)\r\n        props.createNewProvider(formData);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Button className=\"m-2\" variant=\"primary\" onClick={handleShow}>\r\n                Новый постовщик\r\n            </Button>\r\n\r\n            <Modal size=\"lg\" show={show} onHide={handleClose}>\r\n                <Modal.Header closeButton>\r\n                    <Modal.Title>Создание нового поставщика</Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n\r\n                    <ProviderForm onSubmit={onSubmit} />\r\n\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button variant=\"secondary\" onClick={handleClose}>\r\n                        Close\r\n                    </Button>\r\n                    <Button variant=\"primary\" form=\"createNewProvider\" type=\"submit\">\r\n                        Save Changes\r\n                    </Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ProviderCreate;","import {connect} from 'react-redux';\r\nimport ProviderCreate from './ProviderCreate';\r\nimport {createNewProvider} from '../../../../../redux/adminReducer';\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, \r\n    {createNewProvider}) \r\n    (ProviderCreate);","import React, { useState, useEffect } from 'react';\r\nimport { ListGroup, Accordion, Table, Button } from 'react-bootstrap';\r\n\r\nconst ProviderList = (props) => {\r\n    let [data, changeData] = useState(false);\r\n    useEffect(() => {\r\n        changeData(!data);\r\n        console.log(props.admin.providers.length);\r\n        if (props.admin.providers.length === 0) {\r\n            // console.log('start thunk')\r\n            // console.log(props)\r\n            props.getProvidersList(props.admin.providersData.currentPage, props.admin.providersData.pageSize);\r\n        }\r\n    }, [props.data]);\r\n\r\n    console.log('загружен: ' + data);\r\n\r\n    const createParamsElemens = (params, paramsBlock, itemKey) => {\r\n        if (params) {\r\n            for (let paramItem in params) {\r\n                // console.log(paramItem +': '+ typeof params[paramItem])\r\n                if ( typeof params[paramItem] === \"string\" || typeof params[paramItem] === \"number\") {\r\n                    paramsBlock.push(\r\n                        <tr>\r\n                            <td>{paramItem}</td>\r\n                            <td>{params[paramItem]}</td>\r\n                        </tr>\r\n                    );\r\n                } \r\n                else if ( typeof params[paramItem] === \"boolean\" ) {\r\n                    paramsBlock.push(\r\n                        <tr>\r\n                            <td>{paramItem}</td>\r\n                            <td>{\r\n                            params[paramItem] ? <span>Да</span> : <span>Нет</span>\r\n                            }</td>\r\n                        </tr>\r\n                    );\r\n                }\r\n                else {\r\n                    paramsBlock.push(\r\n                        <tr>\r\n                            <td colSpan=\"2\">\r\n                                <Accordion>\r\n                                    <Accordion.Toggle as={Button} className=\"py-0\" variant=\"link\" \r\n                                        eventKey={itemKey+'_'+paramItem}>\r\n                                        {paramItem}\r\n                                    </Accordion.Toggle>\r\n                                    <Accordion.Collapse eventKey={itemKey+'_'+paramItem}>\r\n                                        <div>\r\n                                            {providerParams(params[paramItem], itemKey)}\r\n                                        </div>\r\n                                    </Accordion.Collapse>\r\n                                </Accordion>\r\n                            </td>\r\n                        </tr>\r\n\r\n                    );\r\n                }\r\n            }\r\n        }\r\n        return paramsBlock;\r\n    }\r\n    \r\n    const providerParams = (params, title) => {\r\n        let paramsBlock = [];\r\n        // console.log(paramsBlock)\r\n        paramsBlock = createParamsElemens(params, paramsBlock, title);\r\n        return (\r\n            <Table striped bordered hover size=\"sm\">\r\n                <tbody>\r\n                    {paramsBlock}\r\n                </tbody>\r\n            </Table>\r\n        );\r\n    }\r\n\r\n    let providersList = null;\r\n    providersList = props.admin.providers.map((item) => {\r\n        return (\r\n            <div>\r\n                <ListGroup.Item>\r\n                    <Accordion>\r\n                        <tr className=\"row\">\r\n                            <td className=\"col-4\">\r\n                                <Accordion.Toggle as={Button} className=\"py-0\" variant=\"link\" eventKey={item['name']}>\r\n                                    {item['title']}\r\n                                </Accordion.Toggle>\r\n                            </td>\r\n                            <td className=\"col-2\">{item['loadType']}</td>\r\n                            <td className=\"col-4\">{item['lastLoad']}</td>\r\n                            <td className=\"col-2\">{item['count']}</td>\r\n                        </tr>\r\n                        <Accordion.Collapse eventKey={item['name']}>\r\n                            <div>\r\n                                <Accordion>\r\n                                    <Accordion.Toggle as={Button} className=\"py-0\" eventKey={item['name'] + 'settings'}>\r\n                                        Параметры\r\n                            </Accordion.Toggle>\r\n                                    <Button variant=\"outline-success\" size=\"sm\" className=\"m-1 py-0\">See</Button>\r\n                                    <Button variant=\"outline-success\" size=\"sm\" className=\"m-1 py-0\">LoadPrice</Button>\r\n                                    <Accordion.Collapse eventKey={item['name'] + 'settings'}>\r\n                                        <Table striped bordered hover size=\"sm\">\r\n                                            <tbody>\r\n                                                {providerParams(item, item['title'])}\r\n                                            </tbody>\r\n                                        </Table>\r\n                                    </Accordion.Collapse>\r\n                                </Accordion>\r\n                            </div>\r\n                        </Accordion.Collapse>\r\n                    </Accordion>\r\n                </ListGroup.Item>\r\n            </div>\r\n        );\r\n    });\r\n\r\n    return (\r\n        <ListGroup>\r\n            {providersList}\r\n        </ListGroup>\r\n    );\r\n}\r\n\r\nexport default ProviderList;","import {connect} from 'react-redux';\r\nimport ProviderList from './ProviderList';\r\nimport {getProvidersList} from '../../../../../redux/adminReducer';\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        admin: state.admin\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, \r\n    {getProvidersList}) \r\n    (ProviderList);","import React from 'react';\r\nimport ProviderCreateContainer from './ProviderCreate/ProviderCreateContainer';\r\nimport ProviderListContainer from './ProviderList/ProviderListContainer';\r\n\r\nconst Providers = (props) => {\r\n    return (\r\n        <div>\r\n            <ProviderCreateContainer />\r\n            <ProviderListContainer />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Providers","import {connect} from 'react-redux';\r\nimport Providers from './Providers';\r\nimport {getProcessList, tabIsLoaded, setCurrentProcessPage} from '../../../../redux/adminReducer';\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        admin: state.admin\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, \r\n    {getProcessList, tabIsLoaded, setCurrentProcessPage}) \r\n    (Providers);","import React from 'react';\r\nimport {Tabs, Nav} from 'react-bootstrap';\r\n// import Tab from 'react-bootstrap/Tab';\r\nimport MainCatalogContainer from './MainCatalog/MainCatalogContainer';\r\nimport ProcessContainer from './Process/ProcessContainer';\r\nimport SettingsContainer from './Settings/SettingsContainer';\r\nimport ProvidersContainer from './Providers/ProvidersContainer'\r\nimport { NavLink, Route } from 'react-router-dom';\r\n\r\n\r\nclass Admin extends React.Component {\r\n    // constructor(props) {\r\n    //     super(props);\r\n    //     this.handleSelect = this.handleSelect.bind(this);\r\n    // }\r\n\r\n    // handleSelect(e) {\r\n    //     // this.props.setHandleSelect(key);\r\n    //     console.log(e)\r\n    // }\r\n    componentDidMount() {\r\n        if (!this.props.admin.handleSelect) {\r\n            console.log('НЕОБХОДИМО УСТАНОВИТЬ handleSelect');\r\n        } else {\r\n            console.log('handleSelect УСТАНОВЛЕН');\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const handleSelect = (event) => {\r\n            let tabName = event.currentTarget.getAttribute('tabName');\r\n            this.props.setHandleSelect(tabName);\r\n        }\r\n        // console.log(this.props);\r\n        // console.log('Admin->this.render()');\r\n        // console.log(this.props);\r\n        return (\r\n            <div>\r\n                <Nav variant=\"tabs\" defaultActiveKey=\"/home\">\r\n                    <Nav.Item>\r\n                        <Nav.Link to=\"/adminPanel/mainCatalog\" as={NavLink} \r\n                            tabName=\"mainCatalog\" onClick={handleSelect} >\r\n                            Основной каталог\r\n                        </Nav.Link>\r\n                    </Nav.Item>\r\n                    <Nav.Item>\r\n                        <Nav.Link to=\"/adminPanel/providers\" as={NavLink}\r\n                            tabName=\"providers\" onClick={handleSelect} >\r\n                            Поставщики\r\n                        </Nav.Link>\r\n                    </Nav.Item>\r\n                    <Nav.Item>\r\n                        <Nav.Link to=\"/adminPanel/mail\" as={NavLink}\r\n                            tabName=\"mail\" onClick={handleSelect} >\r\n                            Почта                                               \r\n                        </Nav.Link>\r\n                    </Nav.Item>\r\n                    <Nav.Item>\r\n                        <Nav.Link to=\"/adminPanel/process\" as={NavLink}\r\n                            tabName=\"process\" onClick={handleSelect} >\r\n                            Процессы\r\n                        </Nav.Link>\r\n                    </Nav.Item>\r\n                    <Nav.Item>\r\n                        <Nav.Link to=\"/adminPanel/settings\" as={NavLink}\r\n                            tabName=\"settings\" onClick={handleSelect} >\r\n                            Настройки\r\n                        </Nav.Link>\r\n                    </Nav.Item>\r\n                </Nav>  \r\n\r\n                <Route  path='/adminPanel/mainCatalog'\r\n                        render={() => <MainCatalogContainer />} />\r\n                <Route  path='/adminPanel/process'\r\n                        render={() => <ProcessContainer />} />\r\n                <Route  path='/adminPanel/settings'\r\n                        render={() => <SettingsContainer />} />\r\n                <Route  path='/adminPanel/providers'\r\n                        render={() => <ProvidersContainer />} />\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Admin;","import {connect} from 'react-redux';\r\nimport Admin from './Admin';\r\nimport {setHandleSelect} from '../../../redux/adminReducer';\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        user: state.user,\r\n        admin: state.admin\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, \r\n    {setHandleSelect}) \r\n    (Admin);","import React, { useState } from 'react';\r\nimport Form from 'react-bootstrap/Form';\r\nimport Button from 'react-bootstrap/Button';\r\nimport InputGroup from 'react-bootstrap/InputGroup';\r\nimport Col from 'react-bootstrap/Col';\r\n\r\n\r\n\r\nconst TestForm = (props) => {\r\n\r\n    const [validated, setValidated] = useState(false);\r\n    // const [validated] = useState(true); // запускает проверку сразу\r\n\r\n    const handleSubmit = (event) => {\r\n        const form = event.currentTarget;\r\n        if (form.checkValidity() === false) {\r\n            event.preventDefault();\r\n            event.stopPropagation();\r\n        }\r\n\r\n        setValidated(true);\r\n    };\r\n\r\n    return (\r\n        <Form noValidate validated={validated} onSubmit={handleSubmit}>\r\n            <Form.Row>\r\n                <Form.Group as={Col} md=\"4\" controlId=\"validationCustom01\">\r\n                    <Form.Label>First name</Form.Label>\r\n                    <Form.Control\r\n                        required\r\n                        type=\"text\"\r\n                        placeholder=\"First name\"\r\n                        defaultValue=\"\"\r\n                    />\r\n                    <Form.Control.Feedback>Looks good!</Form.Control.Feedback>\r\n                </Form.Group>\r\n                <Form.Group as={Col} md=\"4\" controlId=\"validationCustom02\">\r\n                    <Form.Label>Last name</Form.Label>\r\n                    <Form.Control\r\n                        required\r\n                        type=\"text\"\r\n                        placeholder=\"Last name\"\r\n                        defaultValue=\"Otto\"\r\n                    />\r\n                    <Form.Control.Feedback>Looks good!</Form.Control.Feedback>\r\n                </Form.Group>\r\n                <Form.Group as={Col} md=\"4\" controlId=\"validationCustomUsername\">\r\n                    <Form.Label>Username</Form.Label>\r\n                    <InputGroup>\r\n                        <InputGroup.Prepend>\r\n                            <InputGroup.Text id=\"inputGroupPrepend\">@</InputGroup.Text>\r\n                        </InputGroup.Prepend>\r\n                        <Form.Control\r\n                            type=\"text\"\r\n                            placeholder=\"Username\"\r\n                            aria-describedby=\"inputGroupPrepend\"\r\n                            required\r\n                        />\r\n                        <Form.Control.Feedback type=\"invalid\">\r\n                            Please choose a username.\r\n                        </Form.Control.Feedback>\r\n                    </InputGroup>\r\n                </Form.Group>\r\n            </Form.Row>\r\n            <Form.Row>\r\n                <Form.Group as={Col} md=\"6\" controlId=\"validationCustom03\">\r\n                    <Form.Label>City</Form.Label>\r\n                    <Form.Control type=\"text\" placeholder=\"City\" required />\r\n                    <Form.Control.Feedback type=\"invalid\">\r\n                        Please provide a valid city.\r\n              </Form.Control.Feedback>\r\n                </Form.Group>\r\n                <Form.Group as={Col} md=\"3\" controlId=\"validationCustom04\">\r\n                    <Form.Label>State</Form.Label>\r\n                    <Form.Control type=\"text\" placeholder=\"State\" required />\r\n                    <Form.Control.Feedback type=\"invalid\">\r\n                        Please provide a valid state.\r\n              </Form.Control.Feedback>\r\n                </Form.Group>\r\n                <Form.Group as={Col} md=\"3\" controlId=\"validationCustom05\">\r\n                    <Form.Label>Zip</Form.Label>\r\n                    <Form.Control type=\"text\" placeholder=\"Zip\" required />\r\n                    <Form.Control.Feedback type=\"invalid\">\r\n                        Please provide a valid zip.\r\n              </Form.Control.Feedback>\r\n                </Form.Group>\r\n            </Form.Row>\r\n            <Form.Group>\r\n                <Form.Check\r\n                    required\r\n                    label=\"Agree to terms and conditions\"\r\n                    feedback=\"You must agree before submitting.\"\r\n                />\r\n            </Form.Group>\r\n            <Button type=\"submit\">Submit form</Button>\r\n        </Form>\r\n    );\r\n}\r\n\r\nexport default TestForm;","import React from 'react';\r\nimport { Route } from 'react-router-dom';\r\n// import Login from './Login/Login';\r\nimport Container from 'react-bootstrap/Container';\r\nimport LoginContainer from './Login/LoginContainer';\r\nimport AdminContainer from './Admin/AdminContainer';\r\nimport TestForm from './../Catalog/Catalog';\r\n\r\nclass Content extends React.Component {\r\n    \r\n    render() {\r\n        // console.log(this.props);\r\n        return (\r\n            <Container>\r\n                <Route path='/login'\r\n                                render={() => <LoginContainer />} />\r\n                {this.props.user.status === 'admin' ?\r\n                <Route path='/adminPanel'\r\n                                render={() => <AdminContainer />} /> : null }\r\n\r\n                <Route path='/catalog'\r\n                                render={() => <TestForm />} />\r\n            </Container>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Content;","import {connect} from 'react-redux';\r\nimport Content from './Content';\r\n// import {setUser, onPhoneChange, onPassChange, togleLoginProgress, getLoginThunkCreator} from '../../../redux/userReducer';\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        user: state.user\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, \r\n    {}) \r\n    (Content);","// import './App.css';\nimport React from 'react';\nimport { BrowserRouter } from 'react-router-dom';\nimport HeaderContainer from './components/Header/HeaderContainer';\nimport ContentContainer from './components/Content/ContentContainer';\nimport {getAuthMeThunkCreator} from './redux/userReducer';\nimport { connect } from 'react-redux';\n\nclass App extends React.Component {\n  componentDidMount() {\n    this.props.getAuthMeThunkCreator();\n  }\n\n  render() {\n    return (\n      <BrowserRouter>\n        <HeaderContainer />\n        <ContentContainer />\n      </BrowserRouter>\n    );\n  }\n}\n\nexport default connect( null, {getAuthMeThunkCreator} )(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","// import React from 'react';\r\nimport { createStore, combineReducers, applyMiddleware } from 'redux';\r\nimport userReducer from './userReducer';\r\nimport adminReducer from './adminReducer';\r\nimport universalReducer from './universalReducer';\r\n// import ProductsReducer from './ProductsReducer';\r\nimport thunkMiddleware from \"redux-thunk\";\r\nimport {reducer as formReducer} from 'redux-form';\r\n\r\nlet redusers = combineReducers({\r\n    user: userReducer,\r\n    admin: adminReducer,\r\n    universal: universalReducer,\r\n    form: formReducer\r\n});\r\n\r\nlet store = createStore(redusers, applyMiddleware(thunkMiddleware));\r\n\r\nwindow.store = store;\r\n// console.log(store.getState());\r\n// console.log(store);яя\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport store from './redux/store';\nimport { Provider } from 'react-redux';\n\n// 8029-3025850 Дмитрий\n\n// npx create-react-app ArtCRM\n// npm install react-router-dom \n// npm install redux \n// npm install react-redux\n// npm install axios\n// npm install react-bootstrap bootstrap\n\n// npm install --save styled-components prop-types\n\nlet rerenderEntireTree = (state) => {\n  ReactDOM.render(\n    <Provider store={store}>\n      <App />\n    </Provider>\n    , document.getElementById('root')\n  );\n};\n\nrerenderEntireTree(store.getState());\n\nstore.subscribe(() => {\n  let state = store.getState();\n  rerenderEntireTree(state);\n});\n\nserviceWorker.unregister();\n"],"sourceRoot":""}